#text = element_text(size = 11))
# show masterpiece
corallivore
corallivore<-ggplot(a, aes(x = SPECIES, y = value, fill = OBS_YEAR)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.2, position=position_dodge(.9)) +
geom_text(data = a, aes(x=SPECIES,
y=value+se,
label=group),
position = position_dodge(0.9),
vjust = -0.4, size = 4) +
facet_grid(DEPTH_BIN~family, scales = "free_x") +
coord_cartesian(ylim=c(0,1.7))+
ylab("Mean Biomass ( g" ~ m^-2 ~ ")") +
scale_fill_manual(values = c("#C77CFF", "#F8766D", "#7CAE00", "#00BFC4")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 14),
# panel.spacing = unit(1, "lines"),
legend.position = "top",
legend.title = element_blank(),
axis.line = element_line(color = "black"),
panel.border = element_rect(colour = "black", fill=NA),
axis.text.y = element_text(colour="black",size=14),
axis.text.x = element_text(colour="black", face="italic", size=10),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust= 1.5, size=12))#,
#text = element_text(size = 11))
# show masterpiece
corallivore
corallivore<-ggplot(a, aes(x = SPECIES, y = value, fill = OBS_YEAR)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.2, position=position_dodge(.9)) +
geom_text(data = a, aes(x=SPECIES,
y=value+se,
label=group),
position = position_dodge(0.9),
vjust = -0.4, size = 4) +
facet_grid(DEPTH_BIN~family, scales = "free_x") +
coord_cartesian(ylim=c(0,1.7))+
ylab("Mean Biomass ( g" ~ m^-2 ~ ")") +
scale_fill_manual(values = c("#C77CFF", "#F8766D", "#7CAE00", "#00BFC4")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 14),
# panel.spacing = unit(1, "lines"),
legend.position = "top",
legend.title = element_blank(),
axis.line = element_line(color = "black"),
panel.border = element_rect(colour = "black", fill=NA),
axis.text.y = element_text(colour="black",size=12),
axis.text.x = element_text(colour="black", face="italic", size=10),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust= 1.5, size=14))#,
#text = element_text(size = 11))
# show masterpiece
corallivore
corallivore<-ggplot(a, aes(x = SPECIES, y = value, fill = OBS_YEAR)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.2, position=position_dodge(.9)) +
geom_text(data = a, aes(x=SPECIES,
y=value+se,
label=group),
position = position_dodge(0.9),
vjust = -0.4, size = 4) +
facet_grid(DEPTH_BIN~family, scales = "free_x") +
coord_cartesian(ylim=c(0,1.7))+
ylab("Mean Biomass ( g" ~ m^-2 ~ ")") +
scale_fill_manual(values = c("#C77CFF", "#F8766D", "#7CAE00", "#00BFC4")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 12),
# panel.spacing = unit(1, "lines"),
legend.position = "top",
legend.title = element_blank(),
axis.line = element_line(color = "black"),
panel.border = element_rect(colour = "black", fill=NA),
axis.text.y = element_text(colour="black",size=12),
axis.text.x = element_text(colour="black", face="italic", size=10),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust= 1.5, size=14))#,
#text = element_text(size = 11))
# show masterpiece
corallivore
corallivore<-ggplot(a, aes(x = SPECIES, y = value, fill = OBS_YEAR)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.2, position=position_dodge(.9)) +
geom_text(data = a, aes(x=SPECIES,
y=value+se,
label=group),
position = position_dodge(0.9),
vjust = -0.4, size = 4) +
facet_grid(DEPTH_BIN~family, scales = "free_x") +
coord_cartesian(ylim=c(0,1.7))+
ylab("Mean Biomass ( g" ~ m^-2 ~ ")") +
scale_fill_manual(values = c("#C77CFF", "#F8766D", "#7CAE00", "#00BFC4")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 12),
# panel.spacing = unit(1, "lines"),
legend.position = "top",
legend.title = element_blank(),
axis.line = element_line(color = "black"),
panel.border = element_rect(colour = "black", fill=NA),
axis.text.y = element_text(colour="black",size=12),
axis.text.x = element_text(colour="black", face="italic", size=10),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust= 1.5, size=12))#,
#text = element_text(size = 11))
# show masterpiece
corallivore
#save file
png(filename = "D:/CRED/R resources/multivariate stats/figures/Jarvis_damsfish_depth.png", width = 8, height = 5, units = "in",res = 600, restoreConsole = TRUE)
print(corallivore)
dev.off()
# load packages
library(tidyr)
library(vegan)
library(devtools) # for pairwise adonis test
library(ggplot2)
library(dunn.test)
library(reshape)
library(dplyr)
# Load data
load("D:/CRED/R resources/multivariate stats/Data/Fish/fish_coral_mat.Rdata")
wd<-fish_coral
View(fish_coral)
# GRAPH: bio mass species of interest per depth bin and per year RW =================================
library(reshape)
library(ggplot2)
library(Rmisc)
# average by year
#!!!!!! MUST DETACH PLYR PACKAGE FOR 'GROUP_BY' TO WORK!!!!!!!
detach(package:plyr)
head(wd)
dat.sig <- wd %>%
gather(., SPECIES, value, CHME,CHOR,CHQU,PLDI,PLJO) %>%
summarySE(., measurevar = "value", groupvars = c("SPECIES", "OBS_YEAR","DEPTH_BIN"), na.rm=T) %>%
mutate(., family = ifelse(((SPECIES == "PLDI") | (SPECIES == "PLJO")), "Damselfish", "Butterflyfish")) %>%
mutate(SPECIES = replace(SPECIES, SPECIES=="PLDI", "P. dickii")) %>%
mutate(SPECIES = replace(SPECIES, SPECIES=="PLJO", "P. johnstonianus")) %>%
mutate(SPECIES = replace(SPECIES, SPECIES=="CHME", "C. meyeri")) %>%
mutate(SPECIES = replace(SPECIES, SPECIES=="CHOR", "C. ornatissimus")) %>%
mutate(SPECIES = replace(SPECIES, SPECIES=="CHQU", "C. quadrimaculatus"))
#write.csv(dat.sig,file="D:/CRED/R resources/multivariate stats/Data/corallivore_letter_fill.csv")
# create table to add letters to bar grpahs
a<-read.csv("D:/CRED/R resources/multivariate stats/Data/corallivore_letter.csv")
head(a)
a$OBS_YEAR<-as.factor(a$OBS_YEAR)
View(a)
# load packages
library(tidyr)
library(vegan)
library(devtools) # for pairwise adonis test
library(ggplot2)
library(dunn.test)
library(reshape)
library(dplyr)
# Load data - site level biomass for corallivore species
load("D:/CRED/R resources/multivariate stats/Data/Fish/fish_coral_mat.Rdata")
wd<-fish_coral
library(reshape)
library(ggplot2)
library(Rmisc)
# average by year
#!!!!!! MUST DETACH PLYR PACKAGE FOR 'GROUP_BY' TO WORK!!!!!!!
detach(package:plyr)
head(wd)
dat.sig <- wd %>%
gather(., SPECIES, value, CHME,CHOR,CHQU,PLDI,PLJO)
View(dat.sig)
View(wd)
dat.sig <- wd %>%
gather(., SPECIES, value, CHME,CHOR,CHQU,PLDI,PLJO) %>% # gather creates a pivot table
summarySE(., measurevar = "value", groupvars = c("SPECIES", "OBS_YEAR","DEPTH_BIN"), na.rm=T)
View(dat.sig)
View(dat.sig)
View(wd)
rm(list=ls())
library(gdata)             # needed for drop_levels()
library(reshape)           # reshape library inclues the cast() function used below
#LOAD LIBRARY FUNCTIONS ...
source("D:/CRED/fish_team_R/fish-paste/lib/core_functions.R")
source("D:/CRED/fish_team_R/fish-paste/lib/fish_team_functions.R")
source("D:/CRED/fish_team_R/fish-paste/lib/Islandwide Mean&Variance Functions.R")
#LOAD THE CLEAN wsd and sectors data
load("D:/CRED/data requests/species pooled by region all years/TMPsectors.Rdata")
load("D:/CRED/data requests/species pooled by region all years/TMPwsd.Rdata")
load("D:/CRED/data requests/species pooled by region all years/TMPdata.cols.Rdata")
#wsd<-wsda
#Potentially cap the data here!
## check wwhether we have ISLANDS that arent in the sectors file
setdiff(unique(wsd$ISLAND),unique(sectors$ISLAND))
#set all Backreef to a single DEPTH_ZONE ("All")
levels(wsd$DEPTH_BIN)<-c(levels(wsd$DEPTH_BIN), "All")
wsd[wsd$REEF_ZONE=="Backreef",]$DEPTH_BIN<-"All"
sectors[sectors$REEF_ZONE=="Backreef",]$DEPTH_BIN<-"All"
wsd$DEPTH_BIN<-as.character(wsd$DEPTH_BIN)# won't change value to "All" if it is a factor
wsd[wsd$ISLAND=="Rose" & wsd$REEF_ZONE=="Lagoon",]$DEPTH_BIN<-"All"
sectors[sectors$ISLAND=="Rose" & sectors$REEF_ZONE=="Lagoon",]$DEPTH_BIN<-"All"
wsd$DEPTH_BIN<-as.factor(wsd$DEPTH_BIN)# change back to factor
wsd$STRATA<-paste(substring(wsd$REEF_ZONE,1,1), substring(wsd$DEPTH_BIN,1,1), sep="")
sectors$STRATA<-paste(substring(sectors$REEF_ZONE,1,1), substring(sectors$DEPTH_BIN,1,1), sep="")
## TREAT GUGUAN, ALAMAGAN, SARIGAN AS ONE ISLAND  (REALLY ONE BASE REPORTING UNIT .. BUT SIMPLER TO STICK TO 'ISLAND')
SGA<-c("Guguan", "Alamagan", "Sarigan")
levels(wsd$ISLAND)<-c(levels(wsd$ISLAND), "AGS")
wsd[wsd$ISLAND %in% SGA,]$ISLAND<-"AGS"
sectors[sectors$ISLAND %in% SGA,]$ISLAND<-"AGS"
levels(wsd$ANALYSIS_YEAR)<-c(levels(wsd$ANALYSIS_YEAR), "2016on")
wsd[wsd$REGION %in% c("MHI", "NWHI") & wsd$OBS_YEAR==2016,]$ANALYSIS_YEAR<-"2016on"
wsd[wsd$REGION %in% c("MHI", "NWHI") & wsd$OBS_YEAR %in% seq(2010,2012),]$ANALYSIS_YEAR<-"2010-12"
wsd[wsd$REGION %in% c("MHI", "NWHI") & wsd$OBS_YEAR %in% seq(2013,2015),]$ANALYSIS_YEAR<-"2013-15"
## generate a complete list of all ANALYSIS STRATA and their size
SCHEMES<-c("RAMP_BASIC", "MARI2011", "MARI2014", "TUT10_12", "AS_SANCTUARY")
for(i in 1:length(SCHEMES)){
tmp2<-sectors[,c("SEC_NAME", SCHEMES[i])]
tmp2$SCHEME<-SCHEMES[i]
names(tmp2)<- c("SEC_NAME", "ANALYSIS_SEC", "ANALYSIS_SCHEME")
tmp<-aggregate(sectors$AREA_HA, sectors[,c(SCHEMES[i], "STRATA")], sum)
tmp$SCHEME<-SCHEMES[i]
names(tmp)<-c("ANALYSIS_SEC", "STRATA", "AREA_HA", "ANALYSIS_SCHEME")
if(i==1){
st<-tmp
as<-tmp2
} else {
st<-rbind(st, tmp)
as<-rbind(as, tmp2)
}
}
as$TMP<-1
as<-aggregate(as$TMP, by=as[,c("SEC_NAME", "ANALYSIS_SCHEME", "ANALYSIS_SEC")], length)
as$x<-NULL
wsd<-merge(wsd, as, by=c("SEC_NAME", "ANALYSIS_SCHEME"), all.x=T)  # add ANALYSISS_SCHEME for tthis sector and sceheme combination
unique(wsd[is.na(wsd$ANALYSIS_SCHEME), c("ISLAND", "ANALYSIS_SEC", "SEC_NAME", "OBS_YEAR", "ANALYSIS_YEAR", "ANALYSIS_SCHEME", "STRATA")])
cast(st, ANALYSIS_SEC ~ ANALYSIS_SCHEME, value="AREA_HA", sum)
wsd<-merge(wsd, st, by=c("ANALYSIS_SCHEME", "ANALYSIS_SEC", "STRATA"), all.x=T)
#check if some are missing an AREA_HA .. which means that they didnt get into the stratification scheme properly
unique(wsd[is.na(wsd$AREA_HA), c("ISLAND", "ANALYSIS_SEC", "SEC_NAME", "OBS_YEAR", "ANALYSIS_YEAR", "ANALYSIS_SCHEME", "STRATA")])
#NOW CHECK HOW MANY REPS WE HAVE PER STRATA
a<-cast(wsd, REGION + ANALYSIS_SCHEME + ISLAND + ANALYSIS_SEC + ANALYSIS_YEAR ~ STRATA, value="AREA_HA", length); a
# OUTPUT sites per years (appendix 3) -------------------------------------
#save(a, file="sites_year_reef_zone_depth_bin.rdata") ## use this for table in appendix 3 - see appendices R file
####################################################################################################################################################################
#
#     POOL WSD (WORKING SITE DATA TO STRATA THEN TO HIGHER LEVELS
##
###################################################################################################################################################################
### CALCULATE MEAN AND VARIANCE WITHIN STRATA ###
SPATIAL_POOLING_BASE<-c("REGION", "ISLAND", "ANALYSIS_SEC", "REEF_ZONE", "STRATA")
ADDITIONAL_POOLING_BY<-c("METHOD", "ANALYSIS_YEAR")                                    # additional fields that we want to break data at, but which do not relate to physical areas (eg survey year or method)
#generate within strata means and vars
POOLING_LEVEL<-c(SPATIAL_POOLING_BASE, ADDITIONAL_POOLING_BY)
dps<-Calc_PerStrata(wsd, data.cols, c(POOLING_LEVEL, "AREA_HA"))
#save(dps,file="tmp REA per strata.RData")
head(dps$Mean)
###### REMOVE STRATA with N=1 (cannot pool those up)
dps$Mean<-dps$Mean[dps$Mean$N>1,]
dps$SampleVar<-dps$SampleVar[dps$SampleVar$N>1,]
dps$SampleSE<-dps$SampleSE[dps$SampleSE$N>1,]
head(wsd)
#save(dps,file="tmp REA per strata.RData")
head(dps$Mean)
summary(dps$Mean)
#SOME EXAMPLES OF POOLING
# e.g. SAVE BY ISLAND AND REEF_ZONE PER YEAR
OUTPUT_LEVEL<-c("REGION", "ISLAND", "REEF_ZONE", "ANALYSIS_YEAR")
dp<-Calc_Pooled_Simple(dps$Mean, dps$SampleVar, data.cols, OUTPUT_LEVEL, "AREA_HA")
data<-as.data.frame(dp)
write.csv(data,file="data_pooled_is_yr_RZ.csv")
getwd()
write.csv(data,file="D:/CRED/data requests/species pooled by region all years/data_pooled_is_yr_RZ.csv")
library(tidyr)
library(lubridate)
library(geosphere)
library(dplyr)
# Prior to running this script, download the data from SatLink and do preliminary cleaning outlined in this document:
# Load cleaned data for each buoy and combine into one file, calculate summary metrics
# buoy 20 overall-------------------------------------------------------------
# set working directory
setwd("T:/MarineDebris/MD Operations/NWHI/2018/Data/Spatial/Satlink/Positions/workspace/combined_data/buoy20")
# read in csv files !!!!!! add new files here for updates each month!!!!!!!
a<-read.csv("01_09_20_buoy20.csv");b<-read.csv("01_10_19_buoy20.csv");c<-read.csv("02_11_20_buoy20.csv");d<-read.csv("03_12_19_buoy20.csv");e<-read.csv("04_16_20buoy20.csv");f<-read.csv("04_18_2019_buoy20.csv");g<-read.csv("05_13_20_buoy20.csv");h<-read.csv("05_20_19_buoy20.csv");i<-read.csv("06_17_20_buoy20.csv");j<-read.csv("06_26_19_buoy20.csv");k<-read.csv("07_21_20_buoy20.csv");l<-read.csv("08_13_19_buoy20.csv");m<-read.csv("08_27_20_buoy20.csv");n<-read.csv("09_11_2019_buoy20.csv");o<-read.csv("09_22_20_buoy20.csv");p<-read.csv("10_11_19_buoy20.csv");q<-read.csv("11_13_19_buoy20.csv");r<-read.csv("11_21_18_buoy20.csv");s<-read.csv("12_10_18_buoy20.csv")
# combine into one dataframe
df1<-rbind(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s)
head(df1)
# clean workspace, remove all separate csv files
rm(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s)
# split date and time columns - tell R the date format that it is in, dd/mm/YYYY, and tell it to change the format to mm/dd/YYYY
wd1<-df1 %>% mutate(Date = format(as.POSIXct(strptime(df1$StoredTime,"%d/%m/%Y %H:%M",tz="")),format = "%m/%d/%Y")) %>%
mutate(Time = format(as.POSIXct(strptime(df1$StoredTime, "%d/%m/%Y %H:%M", tz ="")), format = "%H:%M")) %>%
select(name,lat_con,long_neg,Date,Time,StoredTime)
wd1$Date<-as.Date(wd1$Date, format = "%m/%d/%Y")
# check data
test<-filter(wd1,is.na(Date)) # should be zero
summary(wd1)
# drop data where date format is dd/mm/yy, where conversion didn't work properly
wd2<-filter(wd1, Date > 2018-08-01)
# run original data file through this converstion code, then drop the rows that didn't convert properly
# split date and time columns - tell R the date format that it is in, dd/mm/YY, and time with the seconds, and tell it to change the format to mm/dd/YYYY, and drop the seconds from the time
wd3<-df1 %>% mutate(Date = format(as.POSIXct(strptime(df1$StoredTime,"%d/%m/%y %H:%M:%S",tz="")),format = "%m/%d/%Y")) %>%
mutate(Time = format(as.POSIXct(strptime(df1$StoredTime, "%d/%m/%Y %H:%M", tz ="")), format = "%H:%M")) %>%
select(name,lat_con,long_neg,Date,Time,StoredTime)
wd3$Date<-as.Date(wd3$Date, format = "%m/%d/%Y")
# check data
test<-filter(wd3,is.na(Date)) #should give same # of records in wd2, where the conversion didn't work properly
summary(wd3)
# drop NA records
wd4<-filter(wd3, !is.na(Date))
# combine dataframes with properly formated date values
wd<-rbind(wd4,wd2)
# check that wd has the same number of records as df1, number of fields will be different
dim(wd)
dim(df1)
# put date and time back together in one field now that it is in the same format
wd<-wd %>% mutate(datetime=paste(Date,Time))
# sort the dates
dates=wd$datetime
time=ymd_hm(dates)
wd2=arrange(wd,time)
head(wd2)
wd<-wd2
# GLITCH in the software - remove bogus point
wd<-wd %>% filter(datetime != "2019-12-02 20:33")
library(tidyr)
library(lubridate)
library(geosphere)
library(dplyr)
# Prior to running this script, download the data from SatLink and do preliminary cleaning outlined in this document:
# Load cleaned data for each buoy and combine into one file, calculate summary metrics
# buoy 20 overall-------------------------------------------------------------
# set working directory
setwd("T:/MarineDebris/MD Operations/NWHI/2018/Data/Spatial/Satlink/Positions/workspace/combined_data/buoy20")
rm(list=ls(all=TRUE)) # clean workspace
library(tidyr)
library(lubridate)
library(geosphere)
library(dplyr)
# Prior to running this script, download the data from SatLink and do preliminary cleaning outlined in this document:
# Load cleaned data for each buoy and combine into one file, calculate summary metrics
# buoy 20 overall-------------------------------------------------------------
# set working directory
setwd("T:/MarineDebris/MD Operations/NWHI/2018/Data/Spatial/Satlink/Positions/workspace/combined_data/buoy20")
# read in csv files !!!!!! add new files here for updates each month!!!!!!!
# set up workspace -----------------------
library(maptools)
library(mapdata)
library(PBSmapping)
library(plyr)
library(rgdal)
library(plotrix)
library(tmap)
library(rgeos)
library(raster)
library(grid)
library(maps)
library(dplyr)
# bubble colors (first three numbers, 4th number is transparency .3 = 30% transparent)
# symbol.bg=rgb(1,1,0,0.3) = yellowish
# symbol.bg=rgb(1,0,0,0.3) = red
# (1,0,1) = purple
# (0,1,1) = electric blue
# (0,0,1) = royal blue
grid# clear workspace
rm(list=ls())
# clear graphics
graphics.off()
# read in data produced from script 1_fish_cruise_brief_cleaning, should be in this folder: T:/Fish/Cruise Prep/R_markdown_fish_brief/Data_output/working_site_data_CAPPED.rdata
load("D:/CRED/fish_cruise_routine_report/monitoring_report/2017_status_report/data/Data Outputs/working site data CAPPED.rdata") # loads as 'wsd'
wd<-wsd %>% filter(REGION == "S.MARIAN"|REGION=="N.MARIAN") %>%
filter(OBS_YEAR==2017)
# Get relevant data
head(wd)
mhi<-filter(wd, REGION=="S.MARIAN")
#reading in shapefiles (uses maptools)
island <- importShapefile("D:/CRED/GIS/Common shapefiles/islands.shp")
# get bounding limits for each island
ext=read.csv("D:/CRED/fish_team_R/web based stuff/island_extents_for_R_maps.csv")
# Extract the extent data from an IslandCode as a object of class EXTENT
IC2ext=function(ext,IC){
i=which(ext$ISLAND.CODE==IC)
return(extent(ext$LEFT_XMIN[i],ext$RIGHT_XMAX[i],ext$BOTTOM_YMIN[i],ext$TOP_YMAX[i]))
}
# Aguijan:
IC2ext(ext,"AGU")
plotMap(island,xlim=c(145.533, 145.584), ylim=c(14.839, 14.875),col="gray",bg="lightblue", axes=F,xlab="",ylab="",projection = TRUE, plt = c(.01, .99, .13, .88), polyProps = NULL)
title(main="Aguijan",line=-1.0, cex=1.5)
plotMap(island,xlim=c(145.533, 145.584), ylim=c(14.837, 14.572),col="gray",bg="lightblue", axes=F,xlab="",ylab="",projection = TRUE, plt = c(.01, .99, .13, .88), polyProps = NULL)
title(main="Aguijan",line=-1.0, cex=1.5)
#close the windows area
graphics.off()
plotMap(island,xlim=c(145.533, 145.584), ylim=c(14.837, 14.572),col="gray",bg="lightblue", axes=F,xlab="",ylab="",projection = TRUE, plt = c(.01, .99, .13, .88), polyProps = NULL)
title(main="Aguijan",line=-1.0, cex=1.5)
#points(pch=21,mhi$LONGITUDE, mhi$LATITUDE,col="red",cex=1)
addBubbles(data.frame(EID=1:length(mhi$LONGITUDE),
X=mhi$LONGITUDE, Y=mhi$LATITUDE, Z=mhi$TotFish),
z.max=470, legend.title=expression(paste(" Biomass (g ", m^-2,")",sep="")),max.size=0.6,
symbol.fg=rgb(0,0,0,0.6), symbol.bg=rgb(1,0,0,0.3),legend.cex=0.9)
plotMap(island,xlim=c(145.102, 145.3), ylim=c(14.1, 14.212),col="gray",bg="lightblue", axes=F,xlab="",ylab="",projection = TRUE, plt = c(.01, .99, .25, .99), polyProps = NULL)
title(main="Rota",line=-1.0, cex=1.5)
#points(pch=21,mhi$LONGITUDE, mhi$LATITUDE,col="red",cex=1)
addBubbles(data.frame(EID=1:length(mhi$LONGITUDE),
X=mhi$LONGITUDE, Y=mhi$LATITUDE, Z=mhi$TotFish),
z.max=470, max.size=0.6,legend.pos ="none",
symbol.fg=rgb(0,0,0,0.6), symbol.bg=rgb(1,0,0,0.3))
dev.off()
IC2ext(ext,"AGU")
plotMap(island,xlim=c(145.533, 145.584), ylim=c(14.837, 14.572),col="gray",bg="lightblue", axes=F,xlab="",ylab="",projection = TRUE, plt = c(.01, .99, .13, .88), polyProps = NULL)
title(main="Aguijan",line=-1.0, cex=1.5)
#points(pch=21,mhi$LONGITUDE, mhi$LATITUDE,col="red",cex=1)
addBubbles(data.frame(EID=1:length(mhi$LONGITUDE),
X=mhi$LONGITUDE, Y=mhi$LATITUDE, Z=mhi$TotFish),
z.max=470, legend.title=expression(paste(" Biomass (g ", m^-2,")",sep="")),max.size=0.6,
symbol.fg=rgb(0,0,0,0.6), symbol.bg=rgb(1,0,0,0.3),legend.cex=0.9)
# Tinian
IC2ext(ext,"TIN")
# set up workspace -----------------------
library(maptools)
library(mapdata)
library(PBSmapping)
library(plyr)
library(rgdal)
library(plotrix)
library(tmap)
library(rgeos)
library(raster)
library(grid)
library(maps)
library(dplyr)
# bubble colors (first three numbers, 4th number is transparency .3 = 30% transparent)
# symbol.bg=rgb(1,1,0,0.3) = yellowish
# symbol.bg=rgb(1,0,0,0.3) = red
# (1,0,1) = purple
# (0,1,1) = electric blue
# (0,0,1) = royal blue
grid# clear workspace
rm(list=ls())
# clear graphics
graphics.off()
# read in data produced from script 1_fish_cruise_brief_cleaning, should be in this folder: T:/Fish/Cruise Prep/R_markdown_fish_brief/Data_output/working_site_data_CAPPED.rdata
load("D:/CRED/fish_cruise_routine_report/monitoring_report/2017_status_report/data/Data Outputs/working site data CAPPED.rdata") # loads as 'wsd'
wd<-wsd %>% filter(REGION == "S.MARIAN"|REGION=="N.MARIAN") %>%
filter(OBS_YEAR==2017)
############## Guam, Saipan, Tinian, Rota ###########
# Get relevant data
head(wd)
mhi<-filter(wd, REGION=="S.MARIAN")
#reading in shapefiles (uses maptools)
island <- importShapefile("D:/CRED/GIS/Common shapefiles/islands.shp")
# # # starting point
# map('worldHires')#, xlim=c(-161, -154), ylim=c(17, 25),resolution=0)
# map.axes(las=1)
#
# get bounding limits for each island
ext=read.csv("D:/CRED/fish_team_R/web based stuff/island_extents_for_R_maps.csv")
# Extract the extent data from an IslandCode as a object of class EXTENT - i.e. this prints the bounding coordinates for each island (IC2ext(ext,"GUA")). This will be called later to create plot boundaries
IC2ext=function(ext,IC){
i=which(ext$ISLAND.CODE==IC)
return(extent(ext$LEFT_XMIN[i],ext$RIGHT_XMAX[i],ext$BOTTOM_YMIN[i],ext$TOP_YMAX[i]))
}
# Tinian
IC2ext(ext,"TIN")
plotMap(island,xlim=c(145.57, 145.679), ylim=c(14.913, 15.11),col="gray",bg="lightblue", axes=F,xlab="",ylab="", projection = TRUE, plt = c(.01, .99, .01, .8), polyProps = NULL)#,tckLab=T)
title(main="Tinian", line=-1.0, cex=1.5)
#points(pch=21,mhi$LONGITUDE, mhi$LATITUDE,col="red",cex=1)
addBubbles(data.frame(EID=1:length(mhi$LONGITUDE),
X=mhi$LONGITUDE, Y=mhi$LATITUDE, Z=mhi$TotFish),
z.max=470, max.size=0.6, legend.pos="none",
symbol.fg=rgb(0,0,0,0.6), symbol.bg=rgb(1,0,0,0.3))
# Saipan
IC2ext(ext,"SAI")
grid# clear workspace
plotMap(island,xlim=c(145.682, 145.838), ylim=c(15.084, 15.3),col="gray",bg="lightblue", axes=F,xlab="",ylab="", projection = TRUE, plt = c(.01, .99, .01, .8), polyProps = NULL)#,tckLab=T)
title(main="Saipan", line=-1.0, cex=1.5)
#points(pch=21,mhi$LONGITUDE, mhi$LATITUDE,col="red",cex=1)
addBubbles(data.frame(EID=1:length(mhi$LONGITUDE),
X=mhi$LONGITUDE, Y=mhi$LATITUDE, Z=mhi$TotFish),
z.max=470, max.size=0.6, legend.pos="none",
symbol.fg=rgb(0,0,0,0.6), symbol.bg=rgb(1,0,0,0.3))
###################
# CORAL COVER PLOT
###################
#close the windows area
graphics.off()
rm(list=ls())
library(gdata)             # needed for drop_levels()
library(reshape)           # reshape library inclues the cast() function used below
library(tidyverse)         # for piping operations and data transformation
#LOAD LIBRARY FUNCTIONS ...
# from my local directory
setwd("D:/CRED/fish_team_R/fish-paste")
source("lib/core_functions.R")
source("lib/fish_team_functions.R")
#source("lib/Islandwide Mean&Variance Functions.R")
# get strata and sectors data data - NB - the data in the raw file should be checked and updated
sectors<-read.csv("data/Sectors-Strata-Areas.csv", stringsAsFactors=FALSE)
# load site master to merge with sector names
sm<-read.csv("data/SURVEY MASTER.csv")
sm$SITE<-SiteNumLeadingZeros(sm$SITE)
## LOAD AND CLEAN fish data
load("data/ALL_REA_FISH_RAW.rdata")
x<-df
#
x[x$TAXONNAME=="Torquigener randalli",]
head(x)

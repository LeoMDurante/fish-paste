ungroup() %>%
left_join(pie_coords %>% select(ISLAND, pie_lon, pie_lat), by = "ISLAND")
#  6. Plot: Map + habitat points + pie charts
ggplot() +
# Map base
geom_sf(data = shape_data, fill = "gray95", color = "black") +
# Habitat points using LONGITUDE and LATITUDE from the main data
geom_point(data = wd_habitat_MHI, aes(x = LONGITUDE, y = LATITUDE, color = HABITAT_CODE), size = 2) +
# Pie charts per island
geom_arc_bar(
data = habitat_props,
aes(
x0 = pie_lon, y0 = pie_lat,
r0 = 0, r = 0.25,
start = start, end = end,
fill = HABITAT_CODE
),
inherit.aes = FALSE,
color = "black",
size = 0.2
) +
# Optional: dotted line from island to its pie chart
geom_segment(
data = pie_coords,
aes(x = lon, y = lat, xend = pie_lon, yend = pie_lat),
color = "gray40",
linetype = "dotted"
) +
# Map limits and style
coord_sf(xlim = c(-161, -154), ylim = c(18.5, 23)) +
scale_fill_brewer(palette = "Set3") +
scale_color_brewer(palette = "Set3") +
theme_minimal() +
labs(
title = "Habitat Types by Island: Proportions and Locations",
color = "Habitat Type",
fill = "Habitat Type"
)
View(habitat_props)
View(wd_habitat_MHI)
View(df)
table(df$HABITAT_CODE, df$HABITAT_TYPE)
rm(list=ls())
library(dplyr)
library(this.path)
library(tidyr)
library(tidyverse)
library(lubridate)
library(forcats)
root_dir <- this.path::here(..=1) #Root directory is one folder above where this script is
FRS = read.csv(file.path (root_dir, "01_Data/WH2024.csv")) # WH2023 based on warehouse data in picfinfish MYSQL database using query species_fk = 701 or gear_fk = 40 (13839 records)
MHI = read.csv(file.path (root_dir, "01_Data/MHI_Yau.csv"))
# area code 16123 didn't include 16123I/F/C
# except for 99999, largest area code is 875 in FRS
State = read.csv(file.path (root_dir, "01_Data/State.csv"))
Dealer = read.csv(file.path (root_dir, "01_Data/Dealer_WH2024.csv"))
Dealer$year2 = as.factor(substr(Dealer$REPORT_DATE, 1, 4))
FRS$water = ifelse(FRS$AREA_FK %in% State$code, 1, 2) # 1 = state waters, 2 = federal waters
FRS$zone = ifelse(FRS$AREA_FK %in% State$code, 1, ifelse(FRS$AREA_FK == 331, 2, 3)) # 1 = state waters, 2 = Penguin banks, 3 = federal waters
FRS$year = FRS$REPORT_YEAR
FRS$catch = FRS$LBS_KEPT
FRS$year2 = as.factor(FRS$year) # having year as a factor allows us to use .drop in group_by to avoid losing years with no data
years = sort(unique(FRS$year), decreasing = F)
year_groups <- c("2000–2002", "2003–2005", "2006–2008", "2009–2011", "2012-2014")
year_groups2 <- c("1959-1961", "1962-1964", "1965-1967", "1968-1970",
"1971-1973", "1974-1976", "1977-1979", "1980-1982", "1983-1985", "1986-1988",
"1989-1991", "1992-1994", "1995-1997","1998-2000", "2001-2003", "2004-2006", "2007-2009", "2010-2012", "2013-2015",
"2016-2018", "2019-2021", "2022-2024")
FRS_catch = FRS[FRS$AREA_FK %in% MHI$code & FRS$REPORT_YEAR < 2025 & FRS$SPECIES_FK == 701,] # used to compute catch -- MHI and kona crab only and remove incomplete data from 2025
FRS_catchrate = FRS[FRS$AREA_FK%in%MHI$code & FRS$REPORT_YEAR < 2025 & FRS$GEAR_FK == 40,] # used to compute effort and catch rate -- MHI and dominant gear only and remove incomplete data from 2025
FRS_catchrate$kc_catch = ifelse(FRS_catchrate$SPECIES_FK == 701, FRS_catchrate$LBS_KEPT, 0)
pair_colors = c("gray40", "gray70")
state_colors = c("indianred3", "indianred4")
penguin_bank_colors = c("goldenrod1", "darkgoldenrod")
federal_colors = c("deepskyblue3", "deepskyblue4")
water_colors = c(federal_colors[1], state_colors[1])
zone_colors = c(federal_colors[1], penguin_bank_colors[1], state_colors[1])
#Plot function
plot_kc = function(file_name, plot_data, plot_years, ylab, plot_cols, filled, legend, legend_location = "topright", set_y_max = NA) {
x_min = min(years[plot_years])
x_max = max(years[plot_years])
y_min = 0
y_max = NA
if(is.na(set_y_max)) {
if(filled) {
y_max = max(apply(plot_data[, plot_years], c(2), sum), na.rm = T) * 1.1
} else {
y_max = max(plot_data[, plot_years], na.rm = T) * 1.1
}
} else {
y_max = set_y_max
}
xs = pretty(c(x_min, x_max), n = 4)
xs = xs[xs >= x_min & xs <= x_max]
ys = pretty(c(y_min, y_max), n = 4)
ys = ys[ys >= y_min & ys <= y_max]
#pdf(paste0(root_dir, "/03_Outputs/", file_name, ".pdf"), width = 6.5, height = 5, pointsize = 12)
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.5, 1, 1))
plot(NA, xlim = c(x_min, x_max), ylim = c(y_min, y_max), axes = F, xaxs = "i", yaxs = "i", xlab = "Year", ylab = ylab)
axis(side = 1, at = xs)
axis(side = 2, at = ys, las = 1)
n_row = dim(plot_data)[1]
for(i in 1:n_row) {
if(filled) {
polygon(x = c(min(years[plot_years]), years[plot_years], max(years[plot_years])), y = c(0, apply(plot_data[i:n_row, plot_years, drop = F], c(2), sum), 0), col = plot_cols[i], border = NA)
} else {
lines(x = years[plot_years], y = plot_data[i, plot_years], col = plot_cols[i], lwd = 3)
n_col = dim(plot_data)[2]
for(j in 1:n_col) {
point_before = ifelse(j == 1, NA, plot_data[i, j - 1])
point_after = ifelse(j == n_col, NA, plot_data[i, j + 1])
if(is.na(point_before) & is.na(point_after)) {
points(x = years[j], y = plot_data[i, j], col = plot_cols[i])
}
}
}
}
box(which = "plot", lty = "solid")
if(any(!is.na(legend))) {
if(filled) {
legend(x = legend_location, legend = legend, col = plot_cols, pch = 15, bty = "n")
} else {
legend(x = legend_location, legend = legend, col = plot_cols, lwd = 3, bty = "n")
}
}
dev.off()
}
#Plot function for grouped years
plot_kc_grouped <- function(file_name, plot_data, year_groups, ylab, plot_cols, filled, legend, legend_location = "topright", set_y_max = NA) {
x_vals <- 1:length(year_groups)  # Numeric x positions for year_groups
y_min <- 0
y_max <- if (is.na(set_y_max)) {
if (filled) {
max(apply(plot_data, 2, sum), na.rm = TRUE) * 1.1
} else {
max(plot_data, na.rm = TRUE) * 1.1
}
} else {
set_y_max
}
#pdf(paste0(root_dir, "/03_Outputs/", file_name, ".pdf"), width = 6.5, height = 5, pointsize = 12)
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.6, 1, 4),      # Increase bottom and left margins
mgp = c(3.5, 1, 0),       # Push axis titles further from tick labels
las = 1                  # Horizontal Y-axis tick labels (optional)
)
plot(NA, xlim = range(x_vals), ylim = c(y_min, y_max), axes = FALSE, xaxs = "i", yaxs = "i", xlab = "Year Group", ylab = ylab)
axis(side = 1, at = x_vals, labels = FALSE)  # suppress default labels
text(x = x_vals, y = par("usr")[3] - 0.02 * diff(par("usr")[3:4]),
labels = year_groups, srt = 90, adj = 1, xpd = TRUE, cex = 0.8)
axis(side = 2, las = 1)
n_row <- nrow(plot_data)
for (i in 1:n_row) {
if (filled) {
polygon(x = c(min(x_vals), x_vals, max(x_vals)),
y = c(0, apply(plot_data[i:n_row, , drop = FALSE], 2, sum), 0),
col = plot_cols[i], border = NA)
} else {
lines(x = x_vals, y = plot_data[i, ], col = plot_cols[i], lwd = 3)
n_col <- ncol(plot_data)
for (j in 1:n_col) {
point_before <- ifelse(j == 1, NA, plot_data[i, j - 1])
point_after <- ifelse(j == n_col, NA, plot_data[i, j + 1])
if (is.na(point_before) & is.na(point_after)) {
points(x = x_vals[j], y = plot_data[i, j], col = plot_cols[i])
}
}
}
}
box(which = "plot", lty = "solid")
if (any(!is.na(legend))) {
if (filled) {
legend(x = legend_location, legend = legend, col = plot_cols, pch = 15, bty = "n")
} else {
legend(x = legend_location, legend = legend, col = plot_cols, lwd = 3, bty = "n")
}
}
dev.off()
}
# Plot function for line plot
plot_kc_line_grouped <- function(file_name, plot_data, group_labels, ylab, plot_cols, legend = NA) {
y_min <- 0
y_max <- max(plot_data, na.rm = TRUE) * 1.1
#pdf(paste0(root_dir, "/03_Outputs/", file_name, ".pdf"), width = 6.5, height = 5, pointsize = 12)
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.5, 1, 1))
plot(NA, xlim = c(1, length(group_labels)), ylim = c(y_min, y_max), axes = FALSE, xaxs = "i", yaxs = "i",
xlab = "Year Group", ylab = ylab)
axis(1, at = 1:length(group_labels), labels = group_labels)
axis(2, las = 1)
box(which = "plot", lty = "solid")
lines(1:length(group_labels), plot_data[1, ], col = plot_cols, lwd = 3)
#points(1:length(group_labels), plot_data[1, ], col = plot_cols, pch = 16)
# Add "Penguin Banks" label
legend("topright", legend = "Penguin Banks", col = plot_cols, lty = 1, lwd = 3, bty = "n")
dev.off()
}
#Modified plot function to receive long data format from dplyr
plot_kc_dplyr <- function(file_name, plot_data_list, ylab, plot_cols, filled = FALSE, legend = NULL, legend_location = "topright", set_y_max = NA, year_range = NULL) {
# Convert year2 to numeric inside each df and optionally filter by year_range
plot_data_list <- lapply(plot_data_list, function(df) {
df$year2 <- as.numeric(as.character(df$year2))
if(!is.null(year_range)) {
df <- df %>% filter(year2 >= year_range[1], year2 <= year_range[2])
}
df
})
# Combine all years from filtered data
all_years <- sort(unique(unlist(lapply(plot_data_list, function(df) df$year2))))
if(length(all_years) == 0) {
stop("No data available in the specified year range.")
}
cpue_matrix <- sapply(plot_data_list, function(df) {
cpue_vec <- rep(NA, length(all_years))
match_years <- match(df$year2, all_years)
cpue_vec[match_years] <- df$cpue
return(cpue_vec)
})
cpue_matrix <- t(cpue_matrix)
x_min <- if(!is.null(year_range)) year_range[1] else min(all_years)
x_max <- if(!is.null(year_range)) year_range[2] else max(all_years)
y_min <- 0
y_max <- if (is.na(set_y_max)) {
if (filled) {
max(colSums(cpue_matrix, na.rm = TRUE)) * 1.1
} else {
max(cpue_matrix, na.rm = TRUE) * 1.1
}
} else {
set_y_max
}
xs <- pretty(c(x_min, x_max), n = 4)
xs <- xs[xs >= x_min & xs <= x_max]
ys <- pretty(c(y_min, y_max), n = 4)
ys <- ys[ys >= y_min & ys <= y_max]
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.5, 1, 1))
plot(NA, xlim = c(x_min, x_max), ylim = c(y_min, y_max), axes = FALSE, xaxs = "i", yaxs = "i", xlab = "Year", ylab = ylab)
axis(side = 1, at = xs)
axis(side = 2, at = ys, las = 1)
n_row <- nrow(cpue_matrix)
n_col <- ncol(cpue_matrix)
for (i in 1:n_row) {
if (filled) {
polygon(x = c(x_min, all_years, x_max),
y = c(0, colSums(cpue_matrix[i:n_row, , drop = FALSE], na.rm = TRUE), 0),
col = plot_cols[i], border = NA)
} else {
lines(x = all_years, y = cpue_matrix[i, ], col = plot_cols[i], lwd = 3)
for (j in 1:n_col) {
point_before <- ifelse(j == 1, NA, cpue_matrix[i, j - 1])
point_after  <- ifelse(j == n_col, NA, cpue_matrix[i, j + 1])
if (is.na(point_before) & is.na(point_after) & !is.na(cpue_matrix[i, j])) {
points(x = all_years[j], y = cpue_matrix[i, j], col = plot_cols[i])
}
}
}
}
box(which = "plot", lty = "solid")
if (!is.null(legend)) {
if (filled) {
legend(x = legend_location, legend = legend, col = plot_cols, pch = 15, bty = "n")
} else {
legend(x = legend_location, legend = legend, col = plot_cols, lwd = 3, bty = "n")
}
}
dev.off()
}
#-------------------------------------------------------------------------#
# Fig.2: Catch vs Year, separately for MHI and entire archipelago
mhi = summarise(group_by(FRS[FRS$AREA_FK %in% MHI$code & FRS$SPECIES_FK == 701,], REPORT_YEAR), n = sum(LBS_KEPT))$n
archipelago = summarise(group_by(FRS[FRS$SPECIES_FK == 701,], REPORT_YEAR), n = sum(LBS_KEPT))$n
plot_years = years <= 2024
plot(x = years[plot_years], y = mhi[plot_years], type = 'l', col = "blue")
lines(x = years[plot_years], archipelago[plot_years], col = "orange")
plot_kc(file_name = "Fig.2", plot_data = matrix(c(archipelago - mhi, mhi) / 1000, nrow = 2, byrow = T), plot_years, ylab = "Catch (x 1000 lb)", plot_cols = pair_colors, filled = T, legend = c("NW Hawaiian Islands", "Main Hawaiian Islands"))
rm(list=ls())
library(dplyr)
library(this.path)
library(tidyr)
library(tidyverse)
library(lubridate)
library(forcats)
root_dir <- this.path::here(..=1) #Root directory is one folder above where this script is
FRS = read.csv(file.path (root_dir, "01_Data/WH2024.csv")) # WH2023 based on warehouse data in picfinfish MYSQL database using query species_fk = 701 or gear_fk = 40 (13839 records)
MHI = read.csv(file.path (root_dir, "01_Data/MHI_Yau.csv"))
# area code 16123 didn't include 16123I/F/C
# except for 99999, largest area code is 875 in FRS
State = read.csv(file.path (root_dir, "01_Data/State.csv"))
Dealer = read.csv(file.path (root_dir, "01_Data/Dealer_WH2024.csv"))
Dealer$year2 = as.factor(substr(Dealer$REPORT_DATE, 1, 4))
FRS$water = ifelse(FRS$AREA_FK %in% State$code, 1, 2) # 1 = state waters, 2 = federal waters
FRS$zone = ifelse(FRS$AREA_FK %in% State$code, 1, ifelse(FRS$AREA_FK == 331, 2, 3)) # 1 = state waters, 2 = Penguin banks, 3 = federal waters
FRS$year = FRS$REPORT_YEAR
FRS$catch = FRS$LBS_KEPT
FRS$year2 = as.factor(FRS$year) # having year as a factor allows us to use .drop in group_by to avoid losing years with no data
years = sort(unique(FRS$year), decreasing = F)
year_groups <- c("2000–2002", "2003–2005", "2006–2008", "2009–2011", "2012-2014")
year_groups2 <- c("1959-1961", "1962-1964", "1965-1967", "1968-1970",
"1971-1973", "1974-1976", "1977-1979", "1980-1982", "1983-1985", "1986-1988",
"1989-1991", "1992-1994", "1995-1997","1998-2000", "2001-2003", "2004-2006", "2007-2009", "2010-2012", "2013-2015",
"2016-2018", "2019-2021", "2022-2024")
FRS_catch = FRS[FRS$AREA_FK %in% MHI$code & FRS$REPORT_YEAR < 2025 & FRS$SPECIES_FK == 701,] # used to compute catch -- MHI and kona crab only and remove incomplete data from 2025
FRS_catchrate = FRS[FRS$AREA_FK%in%MHI$code & FRS$REPORT_YEAR < 2025 & FRS$GEAR_FK == 40,] # used to compute effort and catch rate -- MHI and dominant gear only and remove incomplete data from 2025
FRS_catchrate$kc_catch = ifelse(FRS_catchrate$SPECIES_FK == 701, FRS_catchrate$LBS_KEPT, 0)
pair_colors = c("gray40", "gray70")
state_colors = c("indianred3", "indianred4")
penguin_bank_colors = c("goldenrod1", "darkgoldenrod")
federal_colors = c("deepskyblue3", "deepskyblue4")
water_colors = c(federal_colors[1], state_colors[1])
zone_colors = c(federal_colors[1], penguin_bank_colors[1], state_colors[1])
#Plot function
plot_kc = function(file_name, plot_data, plot_years, ylab, plot_cols, filled, legend, legend_location = "topright", set_y_max = NA) {
x_min = min(years[plot_years])
x_max = max(years[plot_years])
y_min = 0
y_max = NA
if(is.na(set_y_max)) {
if(filled) {
y_max = max(apply(plot_data[, plot_years], c(2), sum), na.rm = T) * 1.1
} else {
y_max = max(plot_data[, plot_years], na.rm = T) * 1.1
}
} else {
y_max = set_y_max
}
xs = pretty(c(x_min, x_max), n = 4)
xs = xs[xs >= x_min & xs <= x_max]
ys = pretty(c(y_min, y_max), n = 4)
ys = ys[ys >= y_min & ys <= y_max]
#pdf(paste0(root_dir, "/03_Outputs/", file_name, ".pdf"), width = 6.5, height = 5, pointsize = 12)
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.5, 1, 1))
plot(NA, xlim = c(x_min, x_max), ylim = c(y_min, y_max), axes = F, xaxs = "i", yaxs = "i", xlab = "Year", ylab = ylab)
axis(side = 1, at = xs)
axis(side = 2, at = ys, las = 1)
n_row = dim(plot_data)[1]
for(i in 1:n_row) {
if(filled) {
polygon(x = c(min(years[plot_years]), years[plot_years], max(years[plot_years])), y = c(0, apply(plot_data[i:n_row, plot_years, drop = F], c(2), sum), 0), col = plot_cols[i], border = NA)
} else {
lines(x = years[plot_years], y = plot_data[i, plot_years], col = plot_cols[i], lwd = 3)
n_col = dim(plot_data)[2]
for(j in 1:n_col) {
point_before = ifelse(j == 1, NA, plot_data[i, j - 1])
point_after = ifelse(j == n_col, NA, plot_data[i, j + 1])
if(is.na(point_before) & is.na(point_after)) {
points(x = years[j], y = plot_data[i, j], col = plot_cols[i])
}
}
}
}
box(which = "plot", lty = "solid")
if(any(!is.na(legend))) {
if(filled) {
legend(x = legend_location, legend = legend, col = plot_cols, pch = 15, bty = "n")
} else {
legend(x = legend_location, legend = legend, col = plot_cols, lwd = 3, bty = "n")
}
}
dev.off()
}
#Plot function for grouped years
plot_kc_grouped <- function(file_name, plot_data, year_groups, ylab, plot_cols, filled, legend, legend_location = "topright", set_y_max = NA) {
x_vals <- 1:length(year_groups)  # Numeric x positions for year_groups
y_min <- 0
y_max <- if (is.na(set_y_max)) {
if (filled) {
max(apply(plot_data, 2, sum), na.rm = TRUE) * 1.1
} else {
max(plot_data, na.rm = TRUE) * 1.1
}
} else {
set_y_max
}
#pdf(paste0(root_dir, "/03_Outputs/", file_name, ".pdf"), width = 6.5, height = 5, pointsize = 12)
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.6, 1, 4),      # Increase bottom and left margins
mgp = c(3.5, 1, 0),       # Push axis titles further from tick labels
las = 1                  # Horizontal Y-axis tick labels (optional)
)
plot(NA, xlim = range(x_vals), ylim = c(y_min, y_max), axes = FALSE, xaxs = "i", yaxs = "i", xlab = "Year Group", ylab = ylab)
axis(side = 1, at = x_vals, labels = FALSE)  # suppress default labels
text(x = x_vals, y = par("usr")[3] - 0.02 * diff(par("usr")[3:4]),
labels = year_groups, srt = 90, adj = 1, xpd = TRUE, cex = 0.8)
axis(side = 2, las = 1)
n_row <- nrow(plot_data)
for (i in 1:n_row) {
if (filled) {
polygon(x = c(min(x_vals), x_vals, max(x_vals)),
y = c(0, apply(plot_data[i:n_row, , drop = FALSE], 2, sum), 0),
col = plot_cols[i], border = NA)
} else {
lines(x = x_vals, y = plot_data[i, ], col = plot_cols[i], lwd = 3)
n_col <- ncol(plot_data)
for (j in 1:n_col) {
point_before <- ifelse(j == 1, NA, plot_data[i, j - 1])
point_after <- ifelse(j == n_col, NA, plot_data[i, j + 1])
if (is.na(point_before) & is.na(point_after)) {
points(x = x_vals[j], y = plot_data[i, j], col = plot_cols[i])
}
}
}
}
box(which = "plot", lty = "solid")
if (any(!is.na(legend))) {
if (filled) {
legend(x = legend_location, legend = legend, col = plot_cols, pch = 15, bty = "n")
} else {
legend(x = legend_location, legend = legend, col = plot_cols, lwd = 3, bty = "n")
}
}
dev.off()
}
# Plot function for line plot
plot_kc_line_grouped <- function(file_name, plot_data, group_labels, ylab, plot_cols, legend = NA) {
y_min <- 0
y_max <- max(plot_data, na.rm = TRUE) * 1.1
#pdf(paste0(root_dir, "/03_Outputs/", file_name, ".pdf"), width = 6.5, height = 5, pointsize = 12)
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.5, 1, 1))
plot(NA, xlim = c(1, length(group_labels)), ylim = c(y_min, y_max), axes = FALSE, xaxs = "i", yaxs = "i",
xlab = "Year Group", ylab = ylab)
axis(1, at = 1:length(group_labels), labels = group_labels)
axis(2, las = 1)
box(which = "plot", lty = "solid")
lines(1:length(group_labels), plot_data[1, ], col = plot_cols, lwd = 3)
#points(1:length(group_labels), plot_data[1, ], col = plot_cols, pch = 16)
# Add "Penguin Banks" label
legend("topright", legend = "Penguin Banks", col = plot_cols, lty = 1, lwd = 3, bty = "n")
dev.off()
}
#Modified plot function to receive long data format from dplyr
plot_kc_dplyr <- function(file_name, plot_data_list, ylab, plot_cols, filled = FALSE, legend = NULL, legend_location = "topright", set_y_max = NA, year_range = NULL) {
# Convert year2 to numeric inside each df and optionally filter by year_range
plot_data_list <- lapply(plot_data_list, function(df) {
df$year2 <- as.numeric(as.character(df$year2))
if(!is.null(year_range)) {
df <- df %>% filter(year2 >= year_range[1], year2 <= year_range[2])
}
df
})
# Combine all years from filtered data
all_years <- sort(unique(unlist(lapply(plot_data_list, function(df) df$year2))))
if(length(all_years) == 0) {
stop("No data available in the specified year range.")
}
cpue_matrix <- sapply(plot_data_list, function(df) {
cpue_vec <- rep(NA, length(all_years))
match_years <- match(df$year2, all_years)
cpue_vec[match_years] <- df$cpue
return(cpue_vec)
})
cpue_matrix <- t(cpue_matrix)
x_min <- if(!is.null(year_range)) year_range[1] else min(all_years)
x_max <- if(!is.null(year_range)) year_range[2] else max(all_years)
y_min <- 0
y_max <- if (is.na(set_y_max)) {
if (filled) {
max(colSums(cpue_matrix, na.rm = TRUE)) * 1.1
} else {
max(cpue_matrix, na.rm = TRUE) * 1.1
}
} else {
set_y_max
}
xs <- pretty(c(x_min, x_max), n = 4)
xs <- xs[xs >= x_min & xs <= x_max]
ys <- pretty(c(y_min, y_max), n = 4)
ys <- ys[ys >= y_min & ys <= y_max]
png(paste0(root_dir, "/03_Outputs/", file_name, ".png"), width = 6.5, height = 5, units = "in", res = 300, pointsize = 12)
par(mar = c(4.5, 4.5, 1, 1))
plot(NA, xlim = c(x_min, x_max), ylim = c(y_min, y_max), axes = FALSE, xaxs = "i", yaxs = "i", xlab = "Year", ylab = ylab)
axis(side = 1, at = xs)
axis(side = 2, at = ys, las = 1)
n_row <- nrow(cpue_matrix)
n_col <- ncol(cpue_matrix)
for (i in 1:n_row) {
if (filled) {
polygon(x = c(x_min, all_years, x_max),
y = c(0, colSums(cpue_matrix[i:n_row, , drop = FALSE], na.rm = TRUE), 0),
col = plot_cols[i], border = NA)
} else {
lines(x = all_years, y = cpue_matrix[i, ], col = plot_cols[i], lwd = 3)
for (j in 1:n_col) {
point_before <- ifelse(j == 1, NA, cpue_matrix[i, j - 1])
point_after  <- ifelse(j == n_col, NA, cpue_matrix[i, j + 1])
if (is.na(point_before) & is.na(point_after) & !is.na(cpue_matrix[i, j])) {
points(x = all_years[j], y = cpue_matrix[i, j], col = plot_cols[i])
}
}
}
}
box(which = "plot", lty = "solid")
if (!is.null(legend)) {
if (filled) {
legend(x = legend_location, legend = legend, col = plot_cols, pch = 15, bty = "n")
} else {
legend(x = legend_location, legend = legend, col = plot_cols, lwd = 3, bty = "n")
}
}
dev.off()
}
#-------------------------------------------------------------------------#
# Fig.2: Catch vs Year, separately for MHI and entire archipelago
mhi = summarise(group_by(FRS[FRS$AREA_FK %in% MHI$code & FRS$SPECIES_FK == 701,], REPORT_YEAR), n = sum(LBS_KEPT))$n
archipelago = summarise(group_by(FRS[FRS$SPECIES_FK == 701,], REPORT_YEAR), n = sum(LBS_KEPT))$n
plot_years = years <= 2024
plot(x = years[plot_years], y = mhi[plot_years], type = 'l', col = "blue")
lines(x = years[plot_years], archipelago[plot_years], col = "orange")
plot_kc(file_name = "Fig.2", plot_data = matrix(c(archipelago - mhi, mhi) / 1000, nrow = 2, byrow = T), plot_years, ylab = "Catch (x 1000 lb)", plot_cols = pair_colors, filled = T, legend = c("NW Hawaiian Islands", "Main Hawaiian Islands"))

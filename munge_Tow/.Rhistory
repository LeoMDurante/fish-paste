source("Benthic_Functions_newApp.R")
inport <- read.csv("KHFMA_Data_Archive_2008to2021.csv") # load archived dataset for comparison at end
fish<-read.csv("Kahekili Fish BASE.csv") # Full dataset (2008-2021)
# Need to merge 2021 and 2024 lat/longs
waypoints <- read.csv("Waypoints_Kahekili_2024.csv") %>% #distinct(Date) %>%
mutate(RoundID = ifelse(str_detect(Date, "10/"), "KA2410", "KA2403")) %>% # add survey RoundID for merging
bind_rows(read.csv("C:/Users/tye.kindinger/Desktop/Kahekili/2021_TLK_Kahekili_ANALYSES/2021 Archive/Waypoints_Kahekili_2021.csv") %>%
mutate(RoundID = ifelse(str_detect(Date, "11/"), "KA2111", "KA2103"))) # add survey RoundID for merging
x<-fish
# rename columns so consistent with NCRMP datasets (for fxns/code from those scripts)
x<-data.frame(METHOD=x$MethodCode, ROUND=x$RoundID, SITEVISITID=x$TransectRunID, location=x$SiteId, LAT=x$Lat, LONG=x$Long, TRID=x$TransectRunID,
DATE=x$Date, TransectDate=x$Date,
SITE=toupper(x$Transect), DIVER=x$ObserverID,
SPECIES=x$SpeciesCode, COUNT=x$Number, SizeClass=x$SizeClass,
LW_A_mm=x$A, LW_B_mm=x$B, LENGTH_CONVERSION_FACTOR=x$TL.to..SL_FL.factor, LMAX=x$L.max..TL.,
FAMILY=x$Family, TAXON=x$Taxa, type=x$TYPE, HERBIVORECLASS=x$Kahekili.Herbivore.Class,
Area=x$Area, TransectDepth_ft=x$Depth, SiteName=x$SiteName, DEPTH=x$Depth, STRATA=toupper(x$Habitat.Type), TROPHIC=x$Trophic.Group)
# KAHEKILI TIME SERIES ONLY
x <- x %>% filter(METHOD=="KAHE BASELINE") %>% # 42,082 rows
# add 2021 & 2024 lat/long info
left_join(waypoints %>% select(RoundID, Transect, Lat, Long) %>% dplyr::rename(ROUND = RoundID, SITE = Transect), by = c("ROUND", "SITE")) %>%
mutate(LAT = ifelse(!is.na(Lat), Lat, LAT)) %>% mutate(LONG = ifelse(!is.na(Long), Long, LONG)) %>% select(-Lat, -Long)
x %>% filter(is.na(LAT) | is.na(LONG)) %>% distinct(ROUND, SITEVISITID, SITE, LAT, LONG) %>% arrange(ROUND, SITE)
## !!! NOTE: ALL OF THESE WAYPOINTS ARE TRULY MISSING --> LEAVE AS NAs
##x<-subset(x, x$METHOD=="KAHE BASELINE")
# TLK: make sure site/transect codes = 3 digits
x <- x %>% mutate(SITE = stringr::str_replace(SITE, '\\d+', function(m) str_pad(m, 2, pad = '0'))) # pad single digits with 0
# deal with missing data --> *double check original datasheets!!
x %>% filter(is.na(DEPTH))%>% distinct(ROUND, SITEVISITID, SITE, DATE) # 12 missing depths from 2008-09
x %>% filter(is.na(LAT)) %>% distinct(ROUND, SITEVISITID, SITE, DATE) %>% arrange(ROUND) # missing depths --> 2021 waypts just need to be merged; check the remainders
x <- x %>% #  mutate_at(vars(LAT, LONG), ~ifelse(is.na(.), 0, .)) %>% # keep missing lat/longs as NAs
mutate(DEPTH = ifelse(is.na(DEPTH) | DEPTH == 0, NA_real_, DEPTH))  # change missing depths or depths of 0 to NAs
#  mutate(DEPTH = ifelse(is.na(DEPTH) | DEPTH == 0, 999, DEPTH))  # change missing depths or depths of 0 to bogus number (999)
##x[is.na(x$LAT),]$LAT<-0
##x[is.na(x$LONG),]$LONG<-0
##x[is.na(x$DEPTH),]$DEPTH<-999
##x[x$DEPTH==0,]$DEPTH<-999
#write.csv(x %>% filter(is.na(LAT)) %>% distinct(ROUND, SITEVISITID, SITE, DATE) %>% arrange(ROUND), "C:/Users/tye.kindinger/Desktop/Kahekili_missingwaypts.csv")
# check for additional missing data
x %>% filter(is.na(STRATA)) # IF MISSING, CHANGE TO "UNK" --> IDW code: x[is.na(x$STRATA),]$STRATA<-"UNK"
x %>% filter(is.na(DATE))
#x[is.na(x$STRATA),]$STRATA<-"UNK"
#x[is.na(x$DATE),]
# create a transects record and save it for other parts of the data analysis
transects <- x %>% group_by(Area, ROUND, STRATA, DATE, SITE, SITEVISITID, LAT, LONG, DEPTH) %>% dplyr::summarise(Tot.Count = sum(COUNT)) # 2,072 rows
##transects<-aggregate(x$COUNT, by=x[,c("Area", "ROUND", "STRATA", "DATE", "SITE", "SITEVISITID", "LAT", "LONG", "DEPTH")], sum)
##dim(transects)
write.csv(transects, "tmp KHFMA transects.csv")
# KAHEKILI ONLY (remove Kahekili control sites)
x <- x %>% filter(Area=="Kahekili") # 42,561 rows
x %>% distinct(Area, location) # double check: location = KAHE & Area = Kahekili
#x<-subset(x, x$Area=="Kahekili")
#x<-subset(x, x$location=="KAHE")
# IDW: convert one 'unknown habitat site to "SAG" .. there is no depth or habitat information, but previous site was SPA, however this one has fishes more typical of SAG and we rarely do 2 SPA sites consecutively. Seems highly likely this is SAG. Thus converting it to that, rather than throw away the data.
inport %>% filter(Habitat_Strata == "UNK") %>% distinct()
# !!! There are also 3 sites with UNK habitats that are archived --> KEEP ALL 3 AS UNK IN THE ARCHIVED DATASET
#x <- x %>% mutate(STRATA = ifelse(STRATA =="UNK" & x$ROUND=="KA0909" & x$SITE=="A34", "SAG", STRATA))
x %>% filter(STRATA == "UNK") %>% distinct(ROUND, SITE, STRATA)
##x[x$STRATA=="UNK" & x$ROUND=="KA0909" & x$SITE=="A34",]$STRATA<-"SAG"
# IDW: Still dropping two sites from 0801 that from lat/longs and from benthic cover appear to be surveys of the rubble/sand zone seaward of the main shallow aggregate reef. This habitat has not been surveyed in any other round - probably was only visited because surveys were still somewhat exploratory.
x %>% filter(STRATA == "UNK")
# !!! THESE 2 SITES ARE IN THE ARCHIVED DATASET --> KEEP FOR ARCHIVING!
#x <- x %>% filter(STRATA != "UNK") # remove C41 & C45 from ROUND KA0801
##x<-subset(x, x$STRATA != "UNK")
wd<-droplevels(x) # 42,561 rows
# prep herbivore classification
hc<-read.csv("Herbivore_classification.csv")
hc <- hc %>% dplyr::rename(FC = F2) %>% # rename column
mutate_at(vars(F1, FC), ~ifelse(.=="GD ", "GD", .)) %>% # remove space in category level
mutate(FC = ifelse(FC %in% c("LE", "SSE"), "SCR", FC)) %>% # IDW: change all scrapers and excavators to a single class - LSE for Hawaii is only CHPE and SCRU (and possibly CHSP too) that are larger than 35cm. In fact, according to Green&Bellwood, I think it is > 35cm SL (which is probably 40 cm or up as TL).. SO almost no encounters with such fishes at Kahekili
mutate(FC = ifelse(SPECIES == "MEVI", "PK", FC)) %>% # IDW: switch MEVI to match MENI -- both appear to be omnivorous, but consume floating fragments of algae [which may mean they don't have an important fxn of cropping substrates]
mutate(FC = ifelse(SPECIES == "ABSO", "HERB", FC)) # IDW: switch from grazer detritivore to general herb - a bit arbitrary that is Grazer/Detritivore and other damsels are general HERB [admittedly it is a larger species than other herbivorous damsels, but also very rare in surveys, so simpler to keep like this]
##names(hc)[names(hc) == "F2"] <- "FC"
##hc[hc$F1=="GD ",]$F1<-"GD"
##hc[hc$FC=="GD ",]$FC<-"GD"
##hc[hc$FC %in% c("LE", "SSE"),]$FC<-"SCR"
##hc[hc$SPECIES=="MEVI",]$FC<-"PK"
##hc[hc$SPECIES=="ABSO",]$FC<-"HERB"
## Kahekili dataset: IDW - change some species codes from DAR variants to CRED variants, to match the herbivore classification file. For species that are not herbivores or detritivores this is not a big deal
# check mismatches
wd %>% left_join(hc %>% select(FC, SPECIES), by = c("SPECIES")) %>% filter(is.na(FC) & type == "Fish") %>% distinct(SPECIES, TAXON) %>% arrange(SPECIES)
# update codes
wd <- wd %>% mutate(SPECIES = ifelse(SPECIES == "ANCY", "ANCH",
ifelse(SPECIES == "APME", "APKA",
ifelse(SPECIES == "ATNA", "AENA",
ifelse(SPECIES == "BASP", "TRIG",
ifelse(SPECIES == "BLSP", "BLEN",
ifelse(SPECIES == "BOAL", "BOBI",
ifelse(SPECIES == "CHSP", "CHSO",
ifelse(SPECIES == "KYSP", "CHUB",
ifelse(SPECIES == "LASP", "WRAS",
ifelse(SPECIES == "SCOR", "SCPP",
ifelse(SPECIES == "STMA", "STFA",
ifelse(SPECIES == "SYSP", "LIZA",
ifelse(SPECIES == "XYPA", "INPA", SPECIES))))))))))))))
##wd[wd$SPECIES=="CHSP",]$SPECIES<-"CHSO"
##wd[wd$SPECIES=="ANCY",]$SPECIES<-"ANCH"
##wd[wd$SPECIES=="APME",]$SPECIES<-"APKA"
##wd[wd$SPECIES=="ATNA",]$SPECIES<-"AENA"
##wd[wd$SPECIES=="BOAL",]$SPECIES<-"BOBI"
##wd[wd$SPECIES=="STMA",]$SPECIES<-"STFA"
## Ivor doesn't change the remainder of species codes --> just updates their FC values to "NOT_HERB" next (likely just for speed since they're all not herbs)
##wd[wd$SPECIES=="SYSP",]$TAXON
##wd[wd$SPECIES=="XYPA",]$TAXON
##wd[wd$SPECIES=="BASP",]$TAXON
##wd[wd$SPECIES=="BLSP",]$TAXON
##wd[wd$SPECIES=="GYSP",]$TAXON
##wd[wd$SPECIES=="LASP",]$TAXON
##wd[wd$SPECIES=="SCOR",]$TAXON
# double check no remaining code mismatches
wd %>% left_join(hc %>% select(FC, SPECIES, TAXONNAME), by = c("SPECIES")) %>% filter(is.na(FC) & type == "Fish") %>% distinct(FC, SPECIES, TAXON) %>% arrange(SPECIES)
# all aren't herbivores
# merge herb classifications
wd <- wd %>% left_join(hc %>% select(SPECIES, FC, TAXONNAME), by = c("SPECIES")) %>%
# remainders --> NOT HERB
mutate(FC = ifelse(is.na(FC) & type == "Fish", "NOT_HERB", FC))
wd %>% filter(is.na(FC) & type == "Fish") %>% distinct(FC, SPECIES, TAXON) # double check they all merged
##wd<-merge(wd, hc[,c("SPECIES", "FC", "TAXONNAME")], by=c("SPECIES"), all.x=T)
##unique(wd[is.na(wd$FC) & wd$type=="Fish",]$SPECIES)
##wd[is.na(wd$FC) & wd$type=="Fish",]$FC<-"NOT_HERB"
# check the merged species lists
wd %>% filter(type == "Fish") %>% mutate(TAXONNAME = gsub("_", " ", TAXONNAME)) %>% distinct(TAXON, TAXONNAME, SPECIES) %>% arrange(TAXON) %>% filter(TAXON != TAXONNAME)
wd <- wd %>% select(-TAXONNAME) # REMOVE column (Ivor NAs it all out)
##unique(wd[wd$type=="Fish", c("TAXON", "TAXONNAME")])
##wd$TAXONNAME<-NA
## ASSIGN VALUES TO SIZE CLASSES
wd %>% distinct(SizeClass)
# make all size classes upper case letters
wd <- wd %>% mutate(SIZE = ifelse(SizeClass %in% c("a","A", "R", "r"), "A", ifelse(SizeClass %in% c("b","B"), "B", ifelse(SizeClass %in% c("c","C", "cc"), "C", ifelse(SizeClass %in% c("d","D"), "D", ifelse(SizeClass %in% c("e","E"), "E", ifelse(SizeClass %in% c("f"), "F", ifelse(SizeClass %in% c("g"), "G", ifelse(SizeClass %in% c("x","XX", "xx", "zz", "X", "xX"), "x", SizeClass)))))))))
# double check
wd %>% distinct(SIZE, SizeClass) %>% arrange(SIZE)
wd %>% filter(is.na(SIZE))
##wd$SIZE<-wd$SizeClass
##tmp<-toupper(wd$SizeClass)
##tmp[tmp %in% c("a","A", "R", "r")]<-"A"
##tmp[tmp %in% c("b","B")]<-"B"
##tmp[tmp %in% c("c","C", "cc")]<-"C"
##tmp[tmp %in% c("d","D")]<-"D"
##tmp[tmp %in% c("e","E")]<-"E"
##tmp[tmp %in% c("x","XX", "xx", "zz", "X")]<-"x"
##tmp<-as.factor(tmp)
##tmp<-droplevels(tmp)
# assign bin values --> **NOTE: there is 1 F in 2021
wd <- wd %>% mutate(SIZE_ = ifelse(SIZE == "A", 2.5, ifelse(SIZE == "B", 7.5, ifelse(SIZE == "C", 12.5, ifelse(SIZE == "D", 17.5, ifelse(SIZE == "E", 22.5, ifelse(SIZE == "F", 27.5, ifelse(SIZE == "G", 32.5, ifelse(SIZE == "x", 0, SIZE)))))))))
wd <- wd %>% mutate_at(vars(SIZE_), ~as.numeric(.))
# double check
wd %>% distinct(SIZE, SIZE_) %>% arrange(SIZE)
##size.levels<-levels(tmp)
##size.levels[size.levels == "A"]<-2.5
##size.levels[size.levels == "B"]<-7.5
##size.levels[size.levels == "C"]<-12.5
##size.levels[size.levels == "D"]<-17.5
##size.levels[size.levels == "E"]<-22.5
##size.levels[size.levels == "x"]<-0
##size.levels<-as.numeric(size.levels)
##levels(tmp)<-size.levels
##wd$SIZE_<-as.numeric(as.character(tmp))
##sort(unique(wd$SIZE_))
# IDW: Some divers using Bins differently above 25  (recording size as top of 5cm slot, so for those people will drop size by 2.5cm)
# TLK: clarified with IDW that some of the Maui DAR divers used e.g., 30 to mean 25-30 instead of 30-35. TLK will clarify that the latter should be used in the Methods protocol.
#      *** This should be a historical thing that gets corrected but is not needed for later years
#           --> just ADD RECENT NOAA DIVER INITIALS TO THE LIST IN THE CODE (list = divers who use Ivor's method) *NOTE* - Kurt's initials are "KNP" instead of "KEI" in the database
wd %>% distinct(DIVER, ROUND) %>% arrange(ROUND)
wd <- wd %>% mutate_at(vars(SIZE_), ~as.numeric(.)) %>% mutate(SIZE_ = ifelse(!(DIVER %in% c("IDW", "JPZ", "DLB", "KKS", "TLK", "KSM", "AEG", "KNP", "MSL", "JC")) & SIZE_ %in% seq(30, 200, 5), SIZE_-2.5, SIZE_))
##DIVERS_USING_25<-c("IDW", "JPZ", "DLB", "KKS")
##wd[!wd$DIVER %in% DIVERS_USING_25 & wd$SIZE_ %in% seq(30, 200, 5), ]$SIZE_<-wd[!wd$DIVER %in% DIVERS_USING_25 & wd$SIZE_ %in% seq(30, 200, 5), ]$SIZE_-2.5
# add fields to working data to make it look like CRED REA data, so that we can use standard CRED pooling functions
wd <- wd %>% mutate(REP = "A") %>% mutate(REPLICATEID = SITEVISITID) %>% mutate(OBS_YEAR = ROUND) %>%
# convert DAR/Kahekili LW values (for lengths in mms) to LW_Values for lengths in cms
mutate(LW_A = LW_A_mm/(0.1^LW_B_mm)) %>% mutate(LW_B = LW_B_mm)
##wd$REP<-"A"
##wd$REPLICATEID<-wd$SITEVISITID
##wd$OBS_YEAR<-wd$ROUND
##wd$LW_A<-wd$LW_A_mm/(0.1^wd$LW_B_mm)
##wd$LW_B<-wd$LW_B_mm
# convert missing LW parameters to zeros (inverts)
wd %>% filter(is.na(LW_A)) %>% distinct(SPECIES, type) # all inverts
wd %>% filter(is.na(LW_B)) %>% distinct(SPECIES, type) # all inverts
wd %>% filter(is.na(LENGTH_CONVERSION_FACTOR)) %>% distinct(type) # all inverts
wd <- wd %>% mutate_at(vars(LW_A, LW_B), ~ifelse(is.na(.), 0, .)) %>% mutate(LENGTH_CONVERSION_FACTOR = ifelse(is.na(LENGTH_CONVERSION_FACTOR), 1, LENGTH_CONVERSION_FACTOR))
##unique(wd[is.na(wd$LW_A),]$SPECIES)
##wd[is.na(wd$LW_A),"LW_A"]<-0
##wd[is.na(wd$LW_A),"LW_B"]<-0
##wd[is.na(wd$LENGTH_CONVERSION_FACTOR),"LENGTH_CONVERSION_FACTOR"]<-1
#base information about the survey - field names should match those in input file (obviously!)
##UNIQUE_SURVEY<-c("SITEVISITID","METHOD")
##UNIQUE_REP<-c(UNIQUE_SURVEY, "REP")
##UNIQUE_COUNT<-c(UNIQUE_REP, "REPLICATEID")
## pull out survey metadata
surveys <- wd %>% distinct(OBS_YEAR, ROUND, SITE, DATE, STRATA, LAT, LONG, SITEVISITID, METHOD, DEPTH) # 1,910 rows
write.csv(surveys, "tmp surveys.csv")
##SURVEY_INFO<-c("OBS_YEAR", "ROUND", "SITE", "DATE", "STRATA", "LAT", "LONG", "SITEVISITID", "METHOD")
##survey_table<-Aggregate_InputTable(wd, SURVEY_INFO) # 1,727 rows
##survey_table$TRANSECT<-toupper(survey_table$SITE)
##dim(survey_table) # 1727   10
##SURVEY_SITE_DATA<-c("DEPTH")
##survey_est_benthos<-Calc_Site_nSurveysArea(wd, UNIQUE_SURVEY, UNIQUE_REP, UNIQUE_COUNT, SURVEY_SITE_DATA) # 1,727 rows
##survey_est_benthos$nCounts<-NULL
##survey_est_benthos$nReps<-NULL
#names(survey_est_benthos)<-c(UNIQUE_SURVEY, SURVEY_SITE_DATA)
## PULL OUT FISH DATA
fish.data<-wd %>% filter(type=="Fish") # 36,257 rows
fish.data %>% distinct(SITEVISITID) # 1,910 rows --> all sites have fish data
##fish.data<-subset(wd, wd$type=="Fish")
##fish.data<-droplevels(fish.data)
##wd<-fish.data
##WD_SAVE<-wd
# CHECK FOR TOO LARGE SIZES
fish.data %>% filter(LMAX < SIZE_) %>% distinct(ROUND, DIVER, SPECIES, SizeClass, SIZE_, LMAX) # 121 rows
# !!! A lot are because of midpoints of size bins! IDW did not have code to adjust any of the sizes prior to 2021; don't change for now for consistency
# !!! LEAVE ALL AS IS --> DATA USERS CAN DECIDE HOW TO HANDLE SIZES > LMAX, AND WILL BE ABLE TO SEE SIZE BINS SO CAN TELL WHEN LG SIZE DUE TO BINNING
##wd[wd$LMAX < wd$SIZE_, c("ROUND", "DIVER", "STRATA", "SPECIES", "COUNT", "SIZE_", "LMAX")]
###wd[wd$LMAX < wd$SIZE_,]$wd$SIZE_ <- wd[wd$LMAX < wd$SIZE_,]$wd$LMAX
# Species table (if needed at some point)
fish.species <- fish.data %>% distinct(SPECIES,TAXON, FAMILY, HERBIVORECLASS, TROPHIC, LW_A, LW_B, LENGTH_CONVERSION_FACTOR)
##FISH_SPECIES_FIELDS<-c("SPECIES","TAXON", "FAMILY", "HERBIVORECLASS", "TROPHIC", "LW_A", "LW_B", "LENGTH_CONVERSION_FACTOR")
##species_table<-Aggregate_InputTable(wd, FISH_SPECIES_FIELDS)
write.csv(fish.species, "2024_fulltimeseries_Kahekili fish species.csv")
## PULL OUT URCHIN DATA
# Prior to 2021: IDW coded to drop any sites without any "Invert" entries (sites that have no urchin data) - assumed OK bc lack of data likely meant people forgot to count urchins); !!KEEP THIS so summaries consistent with prior calculations!!
wd %>% filter(type == "Invert") %>% select(SizeClass, SIZE, SIZE_, LMAX, starts_with("LW_"), LENGTH_CONVERSION_FACTOR, TROPHIC, FC, HERBIVORECLASS) %>% distinct()
# Starting in 2021: missing entries at a site means there were NO urchins seen on the transect -- add rows indicating that
wd.yr <- wd %>% mutate(DATE2 = as.POSIXct(DATE, format = "%m/%d/%Y"))
x.invert <- wd.yr %>% # 2021 ONWARD --> SITES WITH NO URCHINS
filter(DATE2 > as.POSIXct("2020-01-01") & type == "Fish") %>% distinct(SITEVISITID) %>% # create indicator of sites missing invert data
left_join(wd.yr %>% filter(DATE2 > as.POSIXct("2020-01-01") & type == "Invert") %>% distinct(SITEVISITID) %>% mutate(x = "invert"), by = c("SITEVISITID")) %>% filter(is.na(x)) %>% mutate(NO.invert = "Y") %>%
select(-x) %>% right_join(wd.yr, by = c("SITEVISITID"))
x.invert %>% filter(type == "Invert") %>% distinct(SPECIES, TAXON) # SPECIES = NOUR / TAXON = No Urchin
urchin.data <- x.invert %>% filter(NO.invert == "Y") %>% # keep placeholder for site in 2021 with no urchins
mutate(type = "Invert", METHOD = "KAHE BASELINE", FAMILY = "No Urchin", SPECIES = "NOUR", TAXON = "No Urchin", COUNT = 0, SIZE_ = 0, SizeClass = "xx", SIZE = "x") %>%  # consistent with other NOUR entries
mutate_at(vars(starts_with("LW_"), LENGTH_CONVERSION_FACTOR, LMAX), ~0) %>%
select(-DIVER, -TROPHIC, -FC, -DATE2, -NO.invert) %>% # remove columns that should be NAs
bind_rows(wd %>% filter(type == "Invert")) %>% arrange(ROUND, SITEVISITID) %>%
# clean up columns
mutate(SizeClass = "xx", SIZE = "x", SIZE_ = 0) %>% mutate_at(vars(TROPHIC, FC, HERBIVORECLASS), ~NA_character_) %>% mutate_at(vars(LMAX, starts_with("LW_"), LENGTH_CONVERSION_FACTOR), ~NA_real_)
# 6,305 rows
urchin.data %>% distinct(SITEVISITID) # 1,901 rows --> MISSING 9 SITES
write.csv(urchin.data, "tmp urchin.csv")
saveRDS(urchin.data, "tmp urchin.RDS")
##urchin.data<-subset(wd, wd$type=="Invert") # this will miss sites that have no urchin data - maybe that is OK (asthe lack of such data probleably means that people forgot to take it)
##urchin.data<-droplevels(urchin.data)
wd %>% filter(type=="Fish") %>% bind_rows(urchin.data)
raw.clean <- wd %>% filter(type=="Fish") %>% bind_rows(urchin.data) %>%
select(-location, -SiteName, -TRID, -TransectDate, -SizeClass, -TransectDepth_ft, -TROPHIC, -DIVER, -LW_A_mm, -LW_B_mm, -OBS_YEAR, -REP, -REPLICATEID) %>% # remove columns not needed
dplyr::rename(SIZE_BIN = SIZE, DEPTH_FT = DEPTH, KAH_CLASSIF = FC, AREA = Area, TYPE = type, HERB_CLASSIF = HERBIVORECLASS, LW_A_cm = LW_A, LW_B_cm = LW_B) %>% # clean up column names
separate(DATE, c("X", "X2", "OBS_YEAR"), sep = "/", remove = FALSE) %>% select(-X, -X2) %>% # make a year column
dplyr::relocate(AREA, TYPE, METHOD, OBS_YEAR) %>% dplyr::relocate(DATE, .before = SITEVISITID) %>% dplyr::relocate(STRATA, DEPTH_FT, .after = LONG) %>% # order columns
dplyr::relocate(FAMILY, TAXON, HERB_CLASSIF, KAH_CLASSIF, .before = SPECIES) %>% dplyr::relocate(SIZE_BIN, SIZE_, .after = SPECIES) %>% dplyr::relocate(LENGTH_CONVERSION_FACTOR, .after = LW_B_cm) %>%
mutate_if(is.character, list(~na_if(., "")))
write.csv(raw.clean, "2024_Kahekili_FishUrchin_RAW.csv")
fish<-read.csv("2024_Kahekili_FishUrchin_RAW.csv") %>% # Full dataset (2008-2024)
filter(TYPE == "Fish") # FISH DATA ONLY
habitat<-read.csv("KahekiliHabitatAreas.csv")
rm(list=ls())
setwd("C:/Users/tye.kindinger/Desktop/Kahekili/2025_HerbivoryKahekili/Data")
rm(list=ls())
library(tidyverse)
library(gdata)             # needed for drop_levels()
library(reshape)           # reshape library inclues the cast() function used below
library(chron)             #month.day.year function
source("core_functions.R")
source("fish_team_functions.R")
source("Islandwide Mean_Variance Functions.R")
source("KHFMA Functions.R")
fish<-read.csv("2024_Kahekili_FishUrchin_RAW.csv") %>% # Full dataset (2008-2024)
filter(TYPE == "Fish") # FISH DATA ONLY
habitat<-read.csv("KahekiliHabitatAreas.csv")
# load species info --> !!! Important to use this list - includes a lot of clean up TLK used to do later in the code (that code has been removed)
spp.list<-read.csv("C:/Users/Tye.Kindinger/Desktop/TLK-Data-Requests/NCRMP Fish Species List - CLEAN.csv", header=T, na.strings=c("","NA")) %>%
mutate_at(vars(starts_with("LW_"), LMAX, LENGTH_CONVERSION_FACTOR, SLTLRAT, FLTLRAT), ~as.numeric(.))
# UPDATE DAR SPECIES TO BE CONSISTENT WITH NCRMP CODES --> !!! Most of this was done during QC/archiving of Kahekili data, but some spp. remain
fish %>% distinct(SPECIES, TAXON) %>% left_join(spp.list %>% select(SPECIES) %>% mutate(NCRMP = "Y"), by = c("SPECIES")) %>% filter(is.na(NCRMP)) %>% distinct(SPECIES, TAXON)
## CLEAN DATA
fish %>% distinct(AREA, METHOD) # Kahekili | KAHE BASELINE
fish %>% distinct(TYPE)
fish
fish<-read.csv("2024_Kahekili_FishUrchin_RAW.csv") %>% select(-X) %>% # Full dataset (2008-2024)
filter(TYPE == "Fish") # FISH DATA ONLY
habitat<-read.csv("KahekiliHabitatAreas.csv")
# load species info --> !!! Important to use this list - includes a lot of clean up TLK used to do later in the code (that code has been removed)
spp.list<-read.csv("C:/Users/Tye.Kindinger/Desktop/TLK-Data-Requests/NCRMP Fish Species List - CLEAN.csv", header=T, na.strings=c("","NA")) %>%
mutate_at(vars(starts_with("LW_"), LMAX, LENGTH_CONVERSION_FACTOR, SLTLRAT, FLTLRAT), ~as.numeric(.))
# UPDATE DAR SPECIES TO BE CONSISTENT WITH NCRMP CODES --> !!! Most of this was done during QC/archiving of Kahekili data, but some spp. remain
fish %>% distinct(SPECIES, TAXON) %>% left_join(spp.list %>% select(SPECIES) %>% mutate(NCRMP = "Y"), by = c("SPECIES")) %>% filter(is.na(NCRMP)) %>% distinct(SPECIES, TAXON)
## CLEAN DATA
fish %>% distinct(AREA, METHOD) # Kahekili | KAHE BASELINE
fish %>% distinct(TYPE)
fish
fish %>%
# UPDATE FISH CODES
mutate(SPECIES = ifelse(SPECIES == "HECR", "HECA", ifelse(SPECIES == "CHAG", "CHPA", SPECIES))) %>%
select(-FAMILY, -TAXON, -LMAX, -starts_with("LW_"), -LENGTH_CONVERSION_FACTOR) %>%
# ATTACH NCRMP SPECIES INFO
left_join(spp.list %>% select(SPECIES, TAXONNAME, GENUS, FAMILY, LMAX, LW_A, LW_B, LENGTH_CONVERSION_FACTOR, TROPHIC_DEF, TROPHIC_MONREP), by = c("SPECIES")) %>%
#filter(is.na(TAXONNAME)) # check
# ADD COLUMNS
mutate(REP = "A") %>% mutate(REPLICATEID = SITEVISITID)
fish %>% distinct(SITE)
fish %>%
# UPDATE FISH CODES
mutate(SPECIES = ifelse(SPECIES == "HECR", "HECA", ifelse(SPECIES == "CHAG", "CHPA", SPECIES))) %>%
select(-FAMILY, -TAXON) %>%
# ATTACH NCRMP SPECIES INFO
left_join(spp.list %>% select(SPECIES, TAXONNAME, GENUS, FAMILY, TROPHIC_DEF, TROPHIC_MONREP), by = c("SPECIES")) %>%
filter(is.na(TAXONNAME))
fish %>%
# UPDATE FISH CODES
mutate(SPECIES = ifelse(SPECIES == "HECR", "HECA", ifelse(SPECIES == "CHAG", "CHPA", SPECIES))) %>%
select(-FAMILY, -TAXON) %>%
# ATTACH NCRMP SPECIES INFO
left_join(spp.list %>% select(SPECIES, TAXONNAME, GENUS, FAMILY, TROPHIC_DEF, TROPHIC_MONREP), by = c("SPECIES"))
fish %>% distinct(STRATA)
fish %>% filter(STRATA == "UNK")
fish %>% filter(STRATA == "UNK") %>% distinct(ROUND, SITE)
fish %>% distinct(DEPTH)
fish %>% distinct(DEPTH_FT)
fish %>% filter(is.na(DEPTH_FT))
fish %>% filter(is.na(DEPTH_FT)) %>% distinct(ROUND, SITE)
raw <- fish %>%
# UPDATE FISH CODES
mutate(SPECIES = ifelse(SPECIES == "HECR", "HECA", ifelse(SPECIES == "CHAG", "CHPA", SPECIES))) %>%
select(-FAMILY, -TAXON) %>%
# ATTACH NCRMP SPECIES INFO
left_join(spp.list %>% select(SPECIES, TAXONNAME, GENUS, FAMILY, TROPHIC_DEF, TROPHIC_MONREP), by = c("SPECIES")) %>%
#  filter(is.na(TAXONNAME)) # check
# ADD COLUMNS
mutate(REP = "A") %>% mutate(REPLICATEID = SITEVISITID) %>%
# make sure site/transect codes = 3 digits
#  mutate(SITE = stringr::str_replace(SITE, '\\d+', function(m) str_pad(m, 2, pad = '0'))) %>% # pad single digits with 0
# convert DAR/Kahekili LW values from mm to cm
#  mutate(LW_A = LW_A_mm/(0.1^LW_B_mm)) %>% mutate(LW_B = LW_B_mm) %>%
# fix any missing length conversions
mutate(LENGTH_CONVERSION_FACTOR = ifelse(is.na(LENGTH_CONVERSION_FACTOR), 1, LENGTH_CONVERSION_FACTOR)) %>%
# DEAL WITH MISSING INFO --> !!! TLK: LEAVE AS ALL NAs
#  mutate_at(vars(LAT, LONG), ~ifelse(is.na(.), 0, .)) %>% # change missing lat/longs to 0s
#  mutate(DEPTH = ifelse(is.na(DEPTH) | DEPTH == 0, 999, DEPTH)) %>% # change missing depths or depths of 0 to bogus number (999)
#  mutate(STRATA = ifelse(is.na(STRATA), "UNK", STRATA)) %>% # change missing strata to 'UNK'
# FIXES
# IDW: convert one 'unknown habitat site to "SAG"; there is no depth or habitat information, but previous site was SPA,
#      however this one has fishes more typical of SAG and we rarely do 2 SPA sites consecutively. Seems highly likely this is SAG.
#      Thus converting it to that, rather than throw away the data.
mutate(STRATA = ifelse(STRATA =="UNK" & ROUND=="KA0909" & SITE=="A34", "SAG", STRATA)) %>%
# REMOVALS
# IDW: Dropping two sites from 0801 that from lat/longs and from benthic cover appear to be surveys of the rubble/sand zone seaward of the main shallow aggregate reef.
#      This habitat has not been surveyed in any other round - probably was only visited because surveys were still somewhat exploratory.
filter(STRATA != "UNK")  # remove C41 & C45 from ROUND KA0801
# CHECKS
raw %>% filter(is.na(DATE)) # missing dates
summary(raw)
## CLEAN UP FISH INFO
raw %>% filter(FAMILY %in% c("Kyphosidae", "Pomacentridae", "Pomacanthidae")) %>% distinct(FAMILY, SPECIES) %>% arrange(FAMILY, SPECIES)
## CLEAN UP FISH INFO
raw %>% filter(FAMILY %in% c("Kyphosidae", "Pomacanthidae")) %>% distinct(FAMILY, SPECIES) %>% arrange(FAMILY, SPECIES)
raw %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO"))
raw %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO")) %>% distinct(FAMILY, SPECIES, SITEVISITID) %>% arrange(FAMILY, SPECIES)
raw %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO")) %>% group_by(FAMILY, SPECIES, SITEVISITID) %>% dplyr::summarise(N_sites = n_distinct(SITEVISITID))
raw %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO")) %>% group_by(FAMILY, SPECIES) %>% dplyr::summarise(N_sites = n_distinct(SITEVISITID))
spp.list %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO"))
raw %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO")) %>% group_by(FAMILY, SPECIES) %>% dplyr::summarise(N_sites = n_distinct(SITEVISITID))
spp.list %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO"))
raw %>% filter(SPECIES %in% c(CHUB))
raw %>% filter(SPECIES %in% c("CHUB"))
raw %>% filter(SPECES == "CEFI")
raw %>% filter(SPECIES == "CEFI")
spp.list %>% filter(SPECIES %in% c("CHUB", "CEFI", "CEPO"))
raw %>% filter(SPECIES == "CEFI")
#load fish data
load("C:/Users/Tye.Kindinger/Desktop/FISH TEAM/fish-paste/data/ALL_REA_FISH_RAW.Rdata")
x<-df
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & FAMILY == "Centropyge") %>% distinct(SPECIES)
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui")
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & SPECIES == "CEFI")
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & SPECIES == "CEFI") %>% distinct(SITEVISITID)
sm
# load site master to merge with sector names
sm<-read.csv("C:/Users/Tye.Kindinger/Desktop/FISH TEAM/fish-paste/data/SURVEY MASTER.csv")
sm
# load site master to merge with sector names
sm<-read.csv("C:/Users/Tye.Kindinger/Desktop/FISH TEAM/fish-paste/data/SURVEY MASTER.csv")
sm
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & SPECIES == "CEFI")
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & SPECIES == "CEFI") %>% distinct(SITEVISITID) %>% left_join(sm %>% select(SITEVISITID, SEC_NAME), by = c("SITEVISITID"))
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & SPECIES == "CEFI") %>% distinct(SITEVISITID) %>% left_join(sm %>% select(SITEVISITID, SEC_NAME), by = c("SITEVISITID")) %>% arrange(SEC_NAME)
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & SPECIES == "CEFI") %>% distinct(OBS_YEAR, SITEVISITID) %>% left_join(sm %>% select(SITEVISITID, SEC_NAME), by = c("SITEVISITID")) %>% arrange(SEC_NAME)
x %>% filter(OBS_YEAR > 2008 & METHOD == "nSPC" & ISLAND == "Maui" & SPECIES == "CEFI") %>% distinct(OBS_YEAR, SITEVISITID, DIVER) %>% left_join(sm %>% select(SITEVISITID, SEC_NAME), by = c("SITEVISITID")) %>% arrange(SEC_NAME)
raw %>% filter(SPECIES == "CEFI")
# ONLY 1 ANGELFISH SPECIES = CEPO: 86 records --> *REGULARLY SEEN*
raw %>% filter(SPECIES == "CEPO") %>% group_by(ROUND) %>% dplyr::summarise(tot = sum(COUNT))
raw %>% filter(SPECIES == "CEPO")
raw %>% filter(SPECIES == "CEPO")
raw %>% filter(SPECIES == "CEPO") %>% distinct(SITEVISITID)
raw %>% filter(SPECIES == "CEPO") %>% group_by(ROUND) %>% dplyr::summarise(N_mission = n_distinct(SITEVISITID))
raw %>% distinct(ROUND)
raw %>% distinct(ROUND) # 23 missions
raw %>% filter(SPECIES == "CEPO") %>% group_by(ROUND) %>% dplyr::summarise(N_mission = n_distinct(SITEVISITID))
raw %>% filter(SPECIES == "CEPO") %>% group_by(ROUND) %>% dplyr::summarise(tot = sum(COUNT))
x %>% filter(SPECIES == "CEPO") %>% group_by(STRATA) %>% dplyr::summarise(tot = sum(COUNT))
raw %>% filter(SPECIES == "CEPO") %>% group_by(STRATA) %>% dplyr::summarise(tot = sum(COUNT))
raw
raw %>%
# FOCUS ON SCARIDS & ACANTHURIDS ONLY FOR THIS ANALYSIS
mutate_at(vars(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP), ~ifelse(FAMILY %in% c("Scaridae", "Acanthuridae"), ., "NONFOCAL")) %>%
mutate_at(vars(COUNT, SIZE_), ~ifelse(FAMILY == "NONFOCAL", 0, .)) %>% distinct(FAMILY, SPECIES) %>% arrange(FAMILY)
raw %>%
# FOCUS ON SCARIDS & ACANTHURIDS ONLY FOR THIS ANALYSIS
mutate_at(vars(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP), ~ifelse(FAMILY %in% c("Scaridae", "Acanthuridae"), ., "NONFOCAL")) %>%
mutate_at(vars(COUNT, SIZE_), ~ifelse(FAMILY == "NONFOCAL", 0, .)) %>% distinct(FAMILY, SPECIES) %>% arrange(FAMILY, SPECIES)
herb <- raw %>%
# FOCUS ON SCARIDS & ACANTHURIDS ONLY FOR THIS ANALYSIS
mutate_at(vars(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP), ~ifelse(FAMILY %in% c("Scaridae", "Acanthuridae"), ., "NONFOCAL")) %>%
mutate_at(vars(COUNT, SIZE_), ~ifelse(FAMILY == "NONFOCAL", 0, .)) #%>% distinct(FAMILY, SPECIES) %>% arrange(FAMILY, SPECIES)
# ATTACH HERBIVORE INFO
sp.fxn <- read.csv("C:/Users/Tye.Kindinger/Desktop/Grazing-Synthesis/NCRMP_herb_fxn.grps.csv", na.strings=c("","NA")) # NCRMP herb species & functional groups
sp.fxn
sp.fxn
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES"))
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn)) %>% filter(is.na(FxN_grp)) %>% distinct(KAH_CLASSIF)
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn)
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn))
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn)) %>% filter(is.na(FXN_grp)) %>% distinct(KAH_CLASSIF)
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn)) %>%
filter(is.na(FXN_grp) & KAH_CLASSIF == "HERB")
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn)) %>%
filter(is.na(FXN_grp) & KAH_CLASSIF == "HERB") %>% distinct(SPECIES, TAXONNAME)
raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn)) %>%
# CHECK
#  filter(is.na(FXN_grp) & KAH_CLASSIF == "HERB") %>% distinct(SPECIES, TAXONNAME) # !! ALL GOOD --> none are parrots or surgeons
filter(TAXONNAME == "Scarus chameleon")
herb <- raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn)) %>%
# CHECK
#  filter(is.na(FXN_grp) & KAH_CLASSIF == "HERB") %>% distinct(SPECIES, TAXONNAME) # !! ALL GOOD --> none are parrots or surgeons
# FOCUS ON SCARIDS & ACANTHURIDS ONLY FOR THIS ANALYSIS
mutate_at(vars(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp), ~ifelse(FAMILY %in% c("Scaridae", "Acanthuridae"), ., "NONFOCAL")) %>%
mutate_at(vars(COUNT, SIZE_), ~ifelse(FAMILY == "NONFOCAL", 0, .)) #%>% distinct(FAMILY, SPECIES) %>% arrange(FAMILY, SPECIES)
herb
herb <- raw %>%
# add functional groupings --> NOTE: only includes higher-level fish groupings (genus) if entire genus is the same functional group (e.g., Zebrasoma sp --> all Zebrasoma spp = Grazer)
left_join(sp.fxn %>% select(SPECIES, Herb_fxn, Herb_fxn2, starts_with("Fxn_")) %>% select(-Fxn_size_note), by = c("SPECIES")) %>% mutate(FXN_grp = Herb_fxn) %>%
mutate(FXN_grp = ifelse(!is.na(Herb_fxn2) & Fxn_size_include == "Y" & SIZE_ > Fxn_size_cmTL, Herb_fxn2, Herb_fxn)) %>%
# CHECK
#  filter(is.na(FXN_grp) & KAH_CLASSIF == "HERB") %>% distinct(SPECIES, TAXONNAME) # !! ALL GOOD --> none are parrots or surgeons
# FOCUS ON SCARIDS & ACANTHURIDS ONLY FOR THIS ANALYSIS
mutate_at(vars(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp), ~ifelse(FAMILY %in% c("Scaridae", "Acanthuridae"), ., "NONFOCAL")) %>%
mutate_at(vars(COUNT, SIZE_), ~ifelse(FAMILY == "NONFOCAL", 0, .)) #%>% distinct(FAMILY, SPECIES) %>% arrange(FAMILY, SPECIES)
herb
herb %>% filter(FXN_grp == "NONFOCAL") %>% distinct(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp, COUNT, SIZE_)
herb %>% filter(FXN_grp != "NONFOCAL") %>% distinct(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp, COUNT, SIZE_)
herb %>% filter(FXN_grp != "NONFOCAL") %>% distinct(FAMILY, GENUS, SPECIES, TAXONNAME, SIZE_BIN, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp)
herb %>% filter(FXN_grp != "NONFOCAL") %>% distinct(FAMILY, GENUS, SPECIES, TAXONNAME, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp)
herb %>% filter(FXN_grp != "NONFOCAL") %>% distinct(FAMILY, GENUS, SPECIES, TAXONNAME, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp)
herb %>% filter(FXN_grp != "NONFOCAL")
herb %>% filter(FXN_grp != "NONFOCAL") %>% distinct(FAMILY, GENUS, SPECIES, TAXONNAME, TROPHIC_DEF, TROPHIC_MONREP, FXN_grp)
# load equations
eqn <- readRDS("C:/Users/Tye.Kindinger/Desktop/Grazing-Synthesis/MODELS/3_finalmodeleqn.rds")
eqn
eqn %>% filter(IND_var == "size")
# prep equations --> size-based equations only (don't include SST)
eqn.use <- eqn %>% filter(IND_var == "size") %>%
select(RESP_var, IND_var, FXN_grp, FISH_genus, FISH_sciname, formula, a, b)
eqn.use
# ASSIGN MISSING EQUATIONS
# equations per species
wd_herb %>% distinct(TAXONNAME) %>% left_join(eqn.use %>% filter(is.na(FISH_genus)) %>% distinct(FISH_sciname, RESP_var) %>% mutate(have = "Y") %>% spread(RESP_var, have), by = c("TAXONNAME" = "FISH_sciname")) %>%
arrange(TAXONNAME)
# ASSIGN MISSING EQUATIONS
# equations per species
herb %>% filter(TAXONNAME != "NONFOCAL") %>% distinct(TAXONNAME) %>% left_join(eqn.use %>% filter(is.na(FISH_genus)) %>% distinct(FISH_sciname, RESP_var) %>% mutate(have = "Y") %>% spread(RESP_var, have), by = c("TAXONNAME" = "FISH_sciname")) %>% arrange(TAXONNAME)
# ASSIGN MISSING EQUATIONS
# equations per species
herb %>% filter(TAXONNAME != "NONFOCAL") %>% distinct(TAXONNAME) %>% left_join(eqn.use %>% filter(is.na(FISH_genus)) %>% distinct(FISH_sciname, RESP_var) %>% mutate(have = "Y") %>% spread(RESP_var, have), by = c("TAXONNAME" = "FISH_sciname")) %>% arrange(TAXONNAME)
eqn.use
eqn.use %>% distinct(TAXONNAME)
# check for consistent taxon names
eqn.use %>% distinct(FISH_sciname)
# check for consistent taxon names
eqn.use %>% distinct(FISH_sciname) %>% filter(!is.na(FISH_sciname)) %>% mutate(check = "Y") %>% right_join(herb %>% distinct(SPECIES, TAXONNAME), by = c("FISH_sciname" = "TAXONNAME"))
# ASSIGN MISSING EQUATIONS
# equations per species
herb %>% filter(TAXONNAME != "NONFOCAL") %>% distinct(TAXONNAME) %>% left_join(eqn.use %>% filter(is.na(FISH_genus)) %>% distinct(FISH_sciname, RESP_var) %>% mutate(have = "Y") %>% spread(RESP_var, have), by = c("TAXONNAME" = "FISH_sciname")) %>% arrange(TAXONNAME)
eqn.use
# ASSIGN MISSING EQUATIONS
# equations per species
herb %>% filter(TAXONNAME != "NONFOCAL") %>% distinct(TAXONNAME) %>% left_join(eqn.use %>% filter(is.na(FISH_genus)) %>% distinct(FISH_sciname, RESP_var) %>% mutate(have = "Y") %>% spread(RESP_var, have), by = c("TAXONNAME" = "FISH_sciname")) %>% arrange(TAXONNAME)
eqn.use
# ASSIGN MISSING EQUATIONS
# equations per species
herb %>% filter(TAXONNAME != "NONFOCAL") %>% distinct(TAXONNAME) %>% left_join(eqn.use %>% filter(is.na(FISH_genus)) %>% distinct(FISH_sciname, RESP_var) %>% mutate(have = "Y") %>% spread(RESP_var, have), by = c("TAXONNAME" = "FISH_sciname")) %>% arrange(TAXONNAME)
